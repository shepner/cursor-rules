---
description: 
globs: 
alwaysApply: false
---
---
description: "Standards and best practices for viewing, following, and analyzing Docker logs, including safe usage of log commands and time-based filtering. Applies to all file types and shell commands."
globs: ["*.*"]
alwaysApply: true
---

# Docker Logging Best Practices

Guidelines for viewing and analyzing Docker logs effectively.

<rule>
name: docker-logging
description: Standards for viewing and analyzing Docker logs
filters:
  - type: command
    pattern: "docker.*logs|docker-compose.*logs|docker\\s+compose.*logs"

actions:
  - type: reject
    conditions:
      # Reject using -f/--follow without timeout
      - pattern: "logs\\s+(-f|--follow)(?!\\s+--until)"
        message: "Do not use -f/--follow without --until to prevent indefinite hanging"
      # Reject using -f with tail
      - pattern: "logs.*(-f|--follow).*--tail"
        message: "Do not combine --follow with --tail as it causes indefinite hanging"

  - type: suggest
    message: |
      When viewing Docker logs:

      1. View all logs (preferred for searching/analysis):
         ```bash
         # View all logs
         docker compose logs
         
         # Search logs with grep
         docker compose logs | grep "pattern"
         
         # Search logs with multiple patterns
         docker compose logs | grep -E "pattern1|pattern2"
         ```

      2. Limit output size (if logs are too large):
         ```bash
         # View last N lines
         docker compose logs --tail=1000
         
         # View last N lines and search
         docker compose logs --tail=1000 | grep "pattern"
         ```

      3. Follow logs (only for active monitoring):
         ```bash
         # Follow with timeout
         docker compose logs -f --until=1h
         
         # Follow specific service
         docker compose logs -f service_name --until=30m
         ```

      4. Time-based filtering:
         ```bash
         # View logs since timestamp
         docker compose logs --since="2024-03-13T00:00:00"
         
         # View logs until timestamp
         docker compose logs --until="2024-03-13T23:59:59"
         ```

      5. Checking for new logs:
         ```bash
         # Wait for new logs to be generated
         sleep 30 && docker compose logs | grep "pattern"
         
         # Check multiple times with different delays
         sleep 15 && docker compose logs --since="1m" | grep "pattern"
         sleep 30 && docker compose logs --since="1m" | grep "pattern"
         ```
         Using `sleep` is good practice when:
         - Waiting for async operations to complete
         - Checking for new log entries after a change
         - Allowing time for log propagation
         - Monitoring periodic tasks
         - Verifying scheduled job execution

examples:
  - input: |
      # Bad: Will hang indefinitely
      docker compose logs -f --tail=100
      
      # Good: View last 100 lines without following
      docker compose logs --tail=100
      
      # Good: Follow with timeout
      docker compose logs -f --until=1h
      
      # Good: Search all logs
      docker compose logs | grep "error"
      
      # Good: Wait for new logs
      sleep 30 && docker compose logs --since="1m"

metadata:
  priority: high
  version: 1.1
  tags:
    - docker
    - logging
    - best-practices
    - monitoring
  changelog:
    - 1.1: Added section on using sleep for checking new logs
    - 1.0: Initial version with comprehensive logging guidelines
</rule> 