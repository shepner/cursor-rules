---
description: 
globs: 
alwaysApply: false
---
---
description: "Standards for implementing comprehensive security modeling capabilities, including threat, behavior, risk, and baseline modeling. Applies to all programming languages and configuration files."
globs: ["*.*"]
alwaysApply: true
---

# Security Modeling Standards

Rules for implementing comprehensive security modeling capabilities.

<rule>
name: code-model
description: Standards for implementing security modeling mechanisms aligned with security capabilities
filters:
  - type: file_extension
    pattern: "\\.(py|js|ts|java|cpp|cs|go|rs|rb|php|yaml|yml|json|xml|conf|properties)$"
  - type: content
    pattern: "(model|analyze|predict|assess|evaluate|measure|profile|baseline)"

actions:
  - type: validate
    conditions:
      # Model Validation
      - pattern: "\\b(?:model|analyze).*?\\b(?:without|no).*?\\b(?:validate|verify)\\b"
        message: "Validate all security models"
      
      # Data Collection Validation
      - pattern: "\\b(?:collect|gather).*?\\b(?:sensitive|personal|private).*?\\b(?:data|information)\\b"
        message: "Ensure proper data handling in security modeling"
      
      # Analysis Validation
      - pattern: "\\b(?:analyze|process).*?\\b(?:without|no).*?\\b(?:sanitize|validate)\\b"
        message: "Validate and sanitize data for analysis"
      
      # Baseline Validation
      - pattern: "\\b(?:baseline|threshold).*?\\b(?:static|fixed|constant)\\b"
        message: "Implement dynamic security baselines"

  - type: suggest
    message: |
      Implement security modeling following these capability areas:

      1. Threat Modeling:
         - Asset Identification
         - Threat Identification
         - Vulnerability Assessment
         - Risk Analysis
         - Impact Assessment
         - Mitigation Planning
         - Model Validation

      2. Behavior Modeling:
         - User Behavior
         - System Behavior
         - Network Behavior
         - Application Behavior
         - Data Flow Modeling
         - Access Patterns
         - Anomaly Detection

      3. Risk Modeling:
         - Risk Assessment
         - Risk Quantification
         - Risk Prioritization
         - Risk Mitigation
         - Risk Monitoring
         - Risk Reporting
         - Risk Review

      4. Security Metrics:
         - Performance Metrics
         - Security Metrics
         - Compliance Metrics
         - Operational Metrics
         - Risk Metrics
         - Cost Metrics
         - Impact Metrics

      5. Predictive Analysis:
         - Threat Prediction
         - Risk Prediction
         - Impact Prediction
         - Behavior Prediction
         - Performance Prediction
         - Resource Prediction
         - Cost Prediction

      6. Security Baseline:
         - System Baseline
         - Network Baseline
         - Application Baseline
         - User Baseline
         - Performance Baseline
         - Security Baseline
         - Compliance Baseline

examples:
  - input: |
      # Bad: Poor security modeling
      def analyze_system_behavior(data):
          average = sum(data) / len(data)  # Simple average
          if average > threshold:
              alert("Anomaly detected")  # Fixed threshold
      
      # Good: Comprehensive security modeling
      from typing import List, Dict, Any
      import numpy as np
      from sklearn.ensemble import IsolationForest
      import logging
      import json

      class SecurityModelAnalyzer:
          def __init__(self):
              self._logger = logging.getLogger("security.modeling")
              self._model = IsolationForest(random_state=42)
              self._baseline_manager = BaselineManager()
              self._metrics_collector = MetricsCollector()
              
          def analyze_behavior(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
              """Analyze system behavior with comprehensive modeling."""
              try:
                  # Validate and preprocess data
                  validated_data = self._validate_data(data)
                  processed_data = self._preprocess_data(validated_data)
                  
                  # Update baseline
                  self._update_baseline(processed_data)
                  
                  # Perform analysis
                  analysis_results = self._analyze_data(processed_data)
                  
                  # Evaluate against baseline
                  deviations = self._evaluate_deviations(analysis_results)
                  
                  # Generate insights
                  insights = self._generate_insights(deviations)
                  
                  # Update metrics
                  self._update_metrics(analysis_results, deviations)
                  
                  return {
                      "results": analysis_results,
                      "deviations": deviations,
                      "insights": insights,
                      "metrics": self._get_current_metrics()
                  }
                  
              except Exception as e:
                  self._logger.error(f"Analysis error: {str(e)}", exc_info=True)
                  self._handle_analysis_failure(data, e)
                  return None
                  
          def _analyze_data(self, data: np.ndarray) -> Dict[str, Any]:
              """Perform comprehensive behavior analysis."""
              try:
                  # Fit model if necessary
                  if not self._model_is_fitted():
                      self._fit_model(data)
                  
                  # Predict anomalies
                  scores = self._model.score_samples(data)
                  predictions = self._model.predict(data)
                  
                  # Calculate additional metrics
                  temporal_patterns = self._analyze_temporal_patterns(data)
                  behavioral_clusters = self._analyze_behavioral_clusters(data)
                  
                  return {
                      "anomaly_scores": scores.tolist(),
                      "predictions": predictions.tolist(),
                      "temporal_patterns": temporal_patterns,
                      "behavioral_clusters": behavioral_clusters
                  }
                  
              except Exception as e:
                  self._logger.error(f"Data analysis error: {str(e)}", 
                                   exc_info=True)
                  return None
                  
          def _evaluate_deviations(self, results: Dict[str, Any]) -> Dict[str, Any]:
              """Evaluate deviations from baseline."""
              try:
                  baseline = self._baseline_manager.get_current_baseline()
                  
                  deviations = {
                      "anomaly_deviations": self._compute_anomaly_deviations(
                          results["anomaly_scores"], 
                          baseline["anomaly_baseline"]
                      ),
                      "pattern_deviations": self._compute_pattern_deviations(
                          results["temporal_patterns"],
                          baseline["pattern_baseline"]
                      ),
                      "cluster_deviations": self._compute_cluster_deviations(
                          results["behavioral_clusters"],
                          baseline["cluster_baseline"]
                      )
                  }
                  
                  return deviations
                  
              except Exception as e:
                  self._logger.error(f"Deviation analysis error: {str(e)}", 
                                   exc_info=True)
                  return None

metadata:
  priority: critical
  version: 1.0
  tags:
    - security
    - modeling
    - analysis
    - prediction
    - baseline
    - metrics
    - risk-assessment
  changelog:
    - 1.0: Initial version with comprehensive modeling capabilities 