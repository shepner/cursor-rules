---
description: 
globs: 
alwaysApply: false
---
# Error Handling Guidelines

## Overview
Standards for implementing robust error handling across the project.

## Configuration
globs: ["*.py", "*.sql", "*.sh"]
priority: high

## Rules

### Python Error Handling
1. Use specific exception types
2. Implement proper exception hierarchies
3. Log all errors with appropriate context
4. Clean up resources in finally blocks
5. Document error conditions in docstrings

### SQL Error Handling
1. Implement transaction management
2. Handle deadlocks appropriately
3. Validate input parameters
4. Log database errors
5. Implement retry logic for transient failures

### General Principles
1. Fail fast and explicitly
2. Provide meaningful error messages
3. Include error recovery mechanisms
4. Log errors with stack traces
5. Handle resource cleanup

## Examples

### Good Python Error Handling
```python
class DataProcessingError(Exception):
    """Base exception for data processing errors."""
    pass

def process_data(data: dict) -> None:
    try:
        validate_input(data)
        result = transform_data(data)
        save_to_database(result)
    except ValidationError as e:
        logger.error(f"Invalid input data: {e}")
        raise DataProcessingError(f"Data validation failed: {e}")
    except DatabaseError as e:
        logger.error(f"Database operation failed: {e}")
        raise DataProcessingError(f"Could not save data: {e}")
    finally:
        cleanup_resources()
```

### Good SQL Error Handling
```sql
BEGIN TRANSACTION;
    DECLARE @ErrorMessage NVARCHAR(4000);
    BEGIN TRY
        -- Perform operations
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH;
```

## Version History
- 1.0: Initial version
- 1.1: Added SQL error handling guidelines 