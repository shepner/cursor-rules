---
description: Standards for implementing secure coding practices and handling sensitive data
globs: ["*.py", "*.js", "*.ts", "*.java", "*.cpp", "*.cs", "*.go", "*.rs", "*.rb", "*.php", "*.{json,yaml,yml,toml,ini,conf}"]
alwaysApply: true
---
# Security Standards

Rules for implementing secure coding practices and handling sensitive data across the development lifecycle.

<rule>
name: code-security
description: Standards for implementing secure coding practices aligned with comprehensive security capabilities
filters:
  - type: file_extension
    pattern: "\\.(py|js|ts|java|cpp|cs|go|rs|rb|php|yaml|yml|json|xml|conf|properties)$"
  - type: content
    pattern: "(security|auth|crypt|secret|password|token|key|cert|permission|access|role|privilege)"

actions:
  - type: validate
    conditions:
      # Hardening Validations
      - pattern: "\\b(?:password|secret|key|token)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Credentials must not be hardcoded - use secure configuration management"
      
      - pattern: "\\b(?:http|ftp|ws)://(?!localhost)"
        message: "Use HTTPS/WSS for all non-localhost connections"
      
      - pattern: "\\b(?:eval|exec|system|popen|subprocess\\.call)\\s*\\("
        message: "Validate and sanitize all inputs before execution to prevent injection attacks"
      
      # Access Control Validations
      - pattern: "\\b(?:admin|root|superuser|privileged)\\s*[=:]\\s*true"
        message: "Implement proper role-based access control (RBAC)"
      
      - pattern: "\\b(?:auth|login|authenticate).*?\\b(?:bypass|skip|disable)\\b"
        message: "Authentication must not be bypassed"
      
      # Cryptographic Validations
      - pattern: "\\b(?:md5|sha1|des|rc4)\\b"
        message: "Use strong cryptographic algorithms (AES, SHA-256, etc.)"
      
      - pattern: "\\b(?:random|rand|rnd)\\b"
        message: "Use cryptographically secure random number generation"

  - type: suggest
    message: |
      Implement security following these capability areas:

      1. Hardening:
         - Application Configuration Hardening
         - Platform Hardening
         - Credential Hardening
         - Secure Code Implementation
         - Dead Code Elimination
         - Exception Handler Validation
         - Process Segment Protection
         - Stack Protection

      2. Access Control:
         - Identity Management
         - Authentication Mechanisms
         - Multi-factor Authentication
         - Certificate-based Auth
         - Access Governance
         - User Account Permissions
         - Source Code Access Control

      3. Data Protection:
         - Data Security Controls
         - File Encryption
         - Message Encryption
         - Secure Information Transfer
         - Test Data Security
         - Privacy Protection
         - Information Labelling

      4. Secure Development:
         - Secure SDLC Integration
         - Security Testing
         - Secure Software Deployment
         - Supply Chain Security
         - Dependency Management
         - Code Review Process
         - Vulnerability Management

      5. System Security:
         - System Configuration
         - Secure Remote Access
         - Platform Security
         - Network Security
         - Container Security
         - Cloud Security
         - API Security

      6. Operational Security:
         - Logging and Monitoring
         - Incident Response
         - Backup and Recovery
         - Change Management
         - Access Review
         - Security Updates
         - Compliance Management

examples:
  - input: |
      # Bad: Insecure implementation
      def authenticate_user(username, password):
          if username == "admin" and password == "hardcoded_password":  # Hardcoded credentials
              return True
          return check_db(username, password)  # Potential SQL injection
      
      # Good: Secure implementation
      from argon2 import PasswordHasher
      from typing import Optional
      import secrets
      import logging

      class SecureAuthenticator:
          def __init__(self):
              self._hasher = PasswordHasher()
              self._max_attempts = 3
              self._attempt_tracker = {}
              
          def authenticate_user(self, username: str, password: str) -> Optional[str]:
              """Securely authenticate a user with rate limiting and secure password verification."""
              try:
                  # Rate limiting check
                  if self._is_rate_limited(username):
                      logging.warning(f"Rate limit exceeded for user: {username}")
                      return None
                      
                  # Get stored hash from secure storage
                  stored_hash = self._get_stored_hash(username)
                  if not stored_hash:
                      # Use constant time comparison to prevent timing attacks
                      secrets.compare_digest(password, password)
                      return None
                      
                  # Verify password using secure hashing
                  if self._hasher.verify(stored_hash, password):
                      # Reset attempts on successful login
                      self._attempt_tracker.pop(username, None)
                      return self._generate_session_token()
                  
                  self._record_failed_attempt(username)
                  return None
                  
              except Exception as e:
                  logging.error(f"Authentication error: {str(e)}")
                  return None
                  
          def _is_rate_limited(self, username: str) -> bool:
              """Check if user has exceeded maximum login attempts."""
              attempts = self._attempt_tracker.get(username, {"count": 0, "timestamp": 0})
              return attempts["count"] >= self._max_attempts
              
          def _generate_session_token(self) -> str:
              """Generate a cryptographically secure session token."""
              return secrets.token_urlsafe(32)

metadata:
  priority: critical
  version: 2.0
  tags:
    - security
    - hardening
    - authentication
    - encryption
    - access-control
    - secure-coding
  changelog:
    - 2.0: Updated with comprehensive security capabilities framework
    - 1.0: Initial version

## Overview
Standards for implementing secure coding practices across the project.

## Configuration
globs: ["*.py", "*.sql", "*.sh"]
priority: critical

## Rules

### Input Validation
1. User Input
   - Validate all input data
   - Use parameterized queries
   - Sanitize user input
   - Implement input size limits
   - Check data types

2. API Security
   - Validate API responses
   - Handle timeouts appropriately
   - Implement rate limiting
   - Use secure protocols (HTTPS)
   - Monitor API usage

### Data Protection
1. Sensitive Data
   - Never hardcode credentials
   - Use environment variables
   - Encrypt sensitive data
   - Implement access controls
   - Log access attempts

2. Error Handling
   - Don't expose system details
   - Log securely
   - Handle errors gracefully
   - Implement timeouts
   - Use secure defaults

## Examples

### Secure API Handling
```python
import requests
from urllib.parse import urljoin
from typing import Optional
import os

def fetch_api_data(endpoint: str, params: Optional[dict] = None) -> dict:
    """Securely fetch data from API with proper error handling.
    
    Args:
        endpoint: API endpoint path
        params: Optional query parameters
        
    Returns:
        API response data
        
    Raises:
        APIError: If API request fails
        ValidationError: If response validation fails
    """
    api_key = os.getenv('API_KEY')
    if not api_key:
        raise SecurityError("API key not configured")
        
    base_url = "https://api.torn.com/v2/"
    url = urljoin(base_url, endpoint)
    
    try:
        response = requests.get(
            url,
            params=params,
            headers={'Authorization': f'Bearer {api_key}'},
            timeout=30
        )
        response.raise_for_status()
        
        data = response.json()
        validate_response(data)
        return data
        
    except requests.exceptions.Timeout:
        raise APIError("API request timed out")
    except requests.exceptions.RequestException as e:
        raise APIError(f"API request failed: {e}")
```

### Secure SQL Query
```python
from google.cloud import bigquery
from typing import List, Any

def query_member_data(member_ids: List[int]) -> List[dict]:
    """Securely query member data using parameterized query.
    
    Args:
        member_ids: List of member IDs to query
        
    Returns:
        List of member data records
    """
    client = bigquery.Client()
    
    query = """
        SELECT 
            m.id,
            m.name,
            m.level
        FROM `torncity-402423.torn_data.v2_faction_members` m
        WHERE m.id IN UNNEST(@member_ids)
    """
    
    job_config = bigquery.QueryJobConfig(
        query_parameters=[
            bigquery.ArrayQueryParameter(
                "member_ids",
                "INT64",
                member_ids
            )
        ]
    )
    
    try:
        query_job = client.query(query, job_config=job_config)
        return [dict(row) for row in query_job]
    finally:
        client.close()
```

## Version History
- 1.0: Initial version
- 1.1: Added TCdatalogger specific security examples 