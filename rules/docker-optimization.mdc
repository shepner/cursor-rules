---
description: Guidelines for optimizing Docker containers for size, performance, and build time
globs: ["*Dockerfile*", "*.dockerfile", "docker-compose*.yml", "docker-compose*.yaml"]
alwaysApply: true
---
# Docker Optimization Guidelines

Rules for ensuring Docker containers are optimized for size, resource usage, and build time.

<rule>
name: docker-optimization
description: Standards for optimizing Docker containers and build processes
filters:
  # Match Dockerfile and related files
  - type: file_extension
    pattern: "\\.(dockerfile|yml|yaml)$"
  # Match Dockerfile names
  - type: filename
    pattern: "^Dockerfile.*"
  # Match Docker-related content
  - type: content
    pattern: "(FROM|RUN|COPY|ADD|ENV|WORKDIR|EXPOSE|VOLUME|USER|CMD|ENTRYPOINT|ARG|LABEL|SHELL|HEALTHCHECK)"

actions:
  - type: reject
    conditions:
      # Reject multiple FROM statements without multi-stage builds
      - pattern: "FROM.*\\s+FROM.*(?!\\s+AS\\s+)"
        message: "Use multi-stage builds to minimize final image size"
      # Reject inefficient RUN commands
      - pattern: "RUN\\s+apt-get\\s+(?!update && apt-get -y )"
        message: "Combine apt-get update and install commands"
      # Reject package cache retention
      - pattern: "RUN\\s+apt-get\\s+.*(?!\\s+&&\\s+rm\\s+-rf\\s+/var/lib/apt/lists/)"
        message: "Clean up package cache after installation"
      # Reject inefficient layer caching
      - pattern: "COPY\\s+\\.\\s+\\."
        message: "Copy only necessary files to minimize layer size"
      # Reject root user
      - pattern: "FROM\\s+\\w+(?!.*USER\\s+\\w+)"
        message: "Specify a non-root user for security"
      # Reject missing .dockerignore
      - pattern: "COPY|ADD"
        message: "Ensure .dockerignore exists to exclude unnecessary files"
      # Reject inefficient pip installations
      - pattern: "RUN\\s+pip\\s+install\\s+(?!--no-cache-dir)"
        message: "Use --no-cache-dir with pip to reduce image size"
      # Reject curl without cleanup
      - pattern: "RUN\\s+curl.*(?!\\s+&&\\s+rm\\s+-rf)"
        message: "Clean up downloaded files after installation"

  - type: suggest
    message: |
      When optimizing Docker containers:

      1. Base Image Selection:
         - Use minimal base images (alpine, slim variants)
         - Consider distroless for production
         - Use specific version tags
         - Avoid latest tag
         - Update base images regularly
         - Use official images when possible
         - Consider scratch for Go applications

      2. Multi-stage Builds:
         - Separate build and runtime stages
         - Copy only artifacts needed
         - Use builder pattern for compilation
         - Minimize number of layers
         - Share common stages
         - Cache build dependencies
         - Use buildkit features

      3. Layer Optimization:
         - Combine related commands
         - Order layers by change frequency
         - Use .dockerignore effectively
         - Remove unnecessary files
         - Minimize layer size
         - Cache dependencies properly
         - Clean up in same layer

      4. Resource Management:
         - Set memory and CPU limits
         - Use appropriate environment variables
         - Configure logging properly
         - Implement health checks
         - Handle signals correctly
         - Monitor resource usage
         - Use resource constraints

      5. Security Practices:
         - Run as non-root user
         - Remove unnecessary permissions
         - Scan for vulnerabilities
         - Update security patches
         - Remove build tools
         - Minimize attack surface
         - Use secrets management

      6. Build Optimization:
         - Use buildkit
         - Implement parallel builds
         - Cache dependencies
         - Order instructions efficiently
         - Use build arguments
         - Optimize context size
         - Use appropriate build flags

examples:
  - input: |
      # Bad: Inefficient and large image
      FROM ubuntu:latest
      
      RUN apt-get update
      RUN apt-get install -y python3
      RUN apt-get install -y pip
      RUN pip install requests
      
      COPY . .
      
      CMD ["python3", "app.py"]

      # Good: Optimized multi-stage build
      # Build stage
      FROM python:3.9-slim-buster AS builder
      
      WORKDIR /build
      
      # Copy only requirements first to leverage caching
      COPY requirements.txt .
      
      # Combine commands and clean up in same layer
      RUN apt-get update && \
          apt-get install -y --no-install-recommends gcc python3-dev && \
          pip install --no-cache-dir -r requirements.txt && \
          apt-get purge -y gcc python3-dev && \
          apt-get autoremove -y && \
          rm -rf /var/lib/apt/lists/*
      
      # Runtime stage
      FROM python:3.9-slim-buster
      
      WORKDIR /app
      
      # Create and use non-root user
      RUN useradd -m -s /bin/bash appuser && \
          chown -R appuser:appuser /app
      
      USER appuser
      
      # Copy only necessary files
      COPY --from=builder /usr/local/lib/python3.9/site-packages/ /usr/local/lib/python3.9/site-packages/
      COPY app.py .
      
      # Set resource limits
      ENV PYTHONUNBUFFERED=1
      ENV PYTHONDONTWRITEBYTECODE=1
      
      # Add health check
      HEALTHCHECK --interval=30s --timeout=3s \
        CMD curl -f http://localhost:8080/health || exit 1
      
      CMD ["python3", "app.py"]

  - input: |
      # Bad: Inefficient Node.js build
      FROM node:latest
      
      COPY . .
      RUN npm install
      RUN npm run build
      
      CMD ["npm", "start"]

      # Good: Optimized Node.js build
      # Build stage
      FROM node:18-alpine AS builder
      
      WORKDIR /build
      
      # Copy package files first
      COPY package*.json ./
      
      # Install dependencies with cache cleaning
      RUN npm ci --only=production && \
          npm cache clean --force
      
      # Copy source and build
      COPY . .
      RUN npm run build
      
      # Runtime stage
      FROM node:18-alpine
      
      WORKDIR /app
      
      # Create and use non-root user
      RUN addgroup -S appgroup && \
          adduser -S appuser -G appgroup && \
          chown -R appuser:appgroup /app
      
      USER appuser
      
      # Copy only necessary files
      COPY --from=builder /build/dist ./dist
      COPY --from=builder /build/node_modules ./node_modules
      COPY package*.json ./
      
      # Set Node.js options for containers
      ENV NODE_ENV=production
      ENV NODE_OPTIONS="--max-old-space-size=512"
      
      # Add health check
      HEALTHCHECK --interval=30s --timeout=3s \
        CMD wget -q -O - http://localhost:3000/health || exit 1
      
      CMD ["npm", "start"]

metadata:
  priority: high
  version: 1.0
  tags:
    - docker
    - optimization
    - performance
    - security
    - build
  changelog:
    - 1.0: Initial version with comprehensive Docker optimization guidelines
</rule> 