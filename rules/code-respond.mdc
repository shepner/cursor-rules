# Security Response Standards

Rules for implementing comprehensive security incident response capabilities.

<rule>
name: code-respond
description: Standards for implementing security incident response mechanisms aligned with security capabilities
filters:
  - type: file_extension
    pattern: "\\.(py|js|ts|java|cpp|cs|go|rs|rb|php|yaml|yml|json|xml|conf|properties)$"
  - type: content
    pattern: "(respond|incident|alert|remediate|mitigate|contain|recover|block|isolate)"

actions:
  - type: validate
    conditions:
      # Response Action Validations
      - pattern: "\\b(?:block|deny|revoke).*?\\b(?:without|no).*?\\b(?:log|audit|record)\\b"
        message: "All security response actions must be logged"
      
      - pattern: "\\b(?:delete|remove).*?\\b(?:evidence|log|audit)\\b"
        message: "Preserve evidence during incident response"
      
      # Incident Handling Validations
      - pattern: "\\b(?:catch|except).*?\\b(?:pass|continue|return)\\b"
        message: "Implement proper incident handling and response"
      
      - pattern: "\\b(?:retry|attempt).*?\\b(?:infinite|forever)\\b"
        message: "Implement proper retry limits and backoff strategies"
      
      # Response Automation Validations
      - pattern: "\\b(?:auto|automated).*?\\b(?:block|kill|terminate)\\b"
        message: "Ensure automated responses have proper safeguards"

  - type: suggest
    message: |
      Implement response following these capability areas:

      1. Incident Response:
         - Response Planning
         - Response Procedures
         - Response Teams
         - Response Tools
         - Response Documentation
         - Response Testing
         - Response Review

      2. Threat Response:
         - Threat Assessment
         - Threat Containment
         - Threat Elimination
         - Threat Hunting
         - Threat Intelligence
         - Threat Analysis
         - Threat Documentation

      3. Alert Response:
         - Alert Triage
         - Alert Investigation
         - Alert Correlation
         - Alert Escalation
         - Alert Resolution
         - Alert Documentation
         - Alert Review

      4. Automated Response:
         - Response Rules
         - Response Actions
         - Response Workflows
         - Response Validation
         - Response Monitoring
         - Response Logging
         - Response Metrics

      5. Manual Response:
         - Response Procedures
         - Response Checklists
         - Response Guidelines
         - Response Tools
         - Response Documentation
         - Response Training
         - Response Support

      6. Recovery Response:
         - Service Recovery
         - Data Recovery
         - System Recovery
         - Network Recovery
         - Access Recovery
         - Business Recovery
         - Documentation

examples:
  - input: |
      # Bad: Poor incident response
      def handle_security_incident(incident):
          if incident.severity == "high":
              block_ip(incident.source_ip)  # No logging
              return True  # No documentation
      
      # Good: Comprehensive incident response
      from typing import Dict, Any
      import logging
      from datetime import datetime
      import json

      class IncidentResponder:
          def __init__(self):
              self._logger = logging.getLogger("security.response")
              self._response_team = ResponseTeam()
              self._evidence_collector = EvidenceCollector()
              
          def handle_incident(self, incident: Dict[str, Any]) -> bool:
              """Handle security incident with proper response procedures."""
              try:
                  # Log incident receipt
                  incident_id = self._log_incident_receipt(incident)
                  
                  # Collect initial evidence
                  self._evidence_collector.collect(incident_id, incident)
                  
                  # Assess severity and impact
                  severity = self._assess_severity(incident)
                  impact = self._assess_impact(incident)
                  
                  # Execute response plan
                  response_plan = self._create_response_plan(severity, impact)
                  success = self._execute_response_plan(incident_id, response_plan)
                  
                  # Document response actions
                  self._document_response(incident_id, response_plan, success)
                  
                  return success
                  
              except Exception as e:
                  self._logger.error(f"Response error: {str(e)}", exc_info=True)
                  self._escalate_response_failure(incident, e)
                  return False
                  
          def _execute_response_plan(self, incident_id: str, plan: Dict[str, Any]) -> bool:
              """Execute incident response plan with proper logging and safeguards."""
              try:
                  for action in plan["actions"]:
                      # Log action start
                      self._log_response_action(incident_id, action, "start")
                      
                      # Execute action with safeguards
                      if action["type"] == "block":
                          success = self._execute_block_action(action)
                      elif action["type"] == "isolate":
                          success = self._execute_isolate_action(action)
                      elif action["type"] == "notify":
                          success = self._execute_notify_action(action)
                      
                      # Log action completion
                      self._log_response_action(incident_id, action, "complete", success)
                      
                      if not success:
                          self._handle_action_failure(incident_id, action)
                          
                  return True
                  
              except Exception as e:
                  self._logger.error(f"Response plan execution error: {str(e)}", 
                                   exc_info=True)
                  return False

metadata:
  priority: critical
  version: 1.0
  tags:
    - security
    - incident-response
    - threat-response
    - alert-response
    - automation
    - recovery
  changelog:
    - 1.0: Initial version with comprehensive response capabilities 