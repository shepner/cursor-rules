---
description: Guidelines for security practices and data protection
globs: ["*.py", "*.sql", "*.json", "*.yaml", "*.yml", "*.env", "*.conf"]
alwaysApply: true
---
# Security Guidelines

Rules for consistent security practices across the codebase.

<rule>
name: security-standards
description: Standards for security, data protection, and access control
filters:
  # Match Python files
  - type: file_extension
    pattern: "\\.py$"
  # Match SQL files
  - type: file_extension
    pattern: "\\.sql$"
  # Match config files
  - type: file_extension
    pattern: "\\.(json|ya?ml|env|conf)$"
  # Match security related content
  - type: content
    pattern: "(security|auth|crypt|secret|key|password|token|access|oauth|jwt|https|ssl|tls|cert|encrypt|hash)"

actions:
  - type: reject
    conditions:
      # Reject hardcoded secrets
      - pattern: "(password|secret|key|token|credential)\\s*=\\s*['\"][^'\"]+['\"]"
        message: "Do not hardcode sensitive information. Use environment variables or secure vaults."
      # Reject insecure protocols
      - pattern: "http://(?!localhost)"
        message: "Use HTTPS for all non-localhost URLs"
      # Reject weak hash algorithms
      - pattern: "(md5|sha1)\\."
        message: "Use strong hash algorithms (SHA-256 or better)"
      # Reject insecure SQL queries
      - pattern: "f\"SELECT.*{.*}|f'SELECT.*{.*}"
        message: "Use parameterized queries to prevent SQL injection"
      # Reject direct environment variable access
      - pattern: "os\\.environ\\[['\"](mdc:?:API_KEY|SECRET|PASSWORD|TOKEN)['\"]\\]"
        message: "Use a secure configuration manager instead of direct environment variable access"

  - type: suggest
    message: |
      When implementing security measures:

      1. Data Protection:
         - Mask sensitive data in logs
         - Encrypt sensitive information
         - Handle API keys securely
         - Implement access controls
         - Monitor data access
         - Log security events

      2. Authentication:
         - Verify credentials
         - Handle token expiration
         - Implement refresh logic
         - Monitor auth failures
         - Track access patterns
         - Log authentication events

      3. Authorization:
         - Check permissions
         - Implement role-based access
         - Validate operation rights
         - Handle unauthorized access
         - Monitor privilege usage
         - Log authorization decisions

      4. Audit Trail:
         - Track data modifications
         - Log access attempts
         - Record configuration changes
         - Monitor system changes
         - Track user actions
         - Maintain audit history

      5. Compliance:
         - Follow data protection rules
         - Implement retention policies
         - Handle data deletion
         - Monitor compliance
         - Document security measures
         - Track regulatory requirements

examples:
  - input: |
      # Bad: Insecure practices
      API_KEY = "1234567890abcdef"  # Hardcoded secret
      url = "http://api.example.com"  # Insecure protocol
      hash = hashlib.md5(data).hexdigest()  # Weak hash
      query = f"SELECT * FROM users WHERE id = {user_id}"  # SQL injection risk
      secret = os.environ['API_KEY']  # Direct env access

      # Good: Secure practices
      def process_user_data_securely(user_data):
          # Secure configuration
          config = get_secure_config()
          credentials = get_credentials_from_vault()
          
          # Secure connection
          client = create_client(
              base_url="https://api.example.com",
              credentials=credentials,
              ssl_context=create_secure_context()
          )
          
          # Mask sensitive data
          masked_data = mask_sensitive_fields(user_data)
          
          try:
              # Audit logging
              audit_logger.info("Data access", extra={
                  'action': 'process_user_data',
                  'user_id': get_current_user_id(),
                  'access_time': datetime.utcnow().isoformat()
              })
              
              # Permission check
              if not has_permission('process_user_data'):
                  raise PermissionError("Unauthorized access")
              
              # Secure processing
              with secure_connection() as conn:
                  # Use parameterized query
                  result = conn.execute(
                      "SELECT * FROM users WHERE id = %s",
                      (user_id,)
                  )
              
              return result
              
          except Exception as e:
              security_logger.error("Security event", extra={
                  'event_type': 'data_access_error',
                  'error': mask_sensitive_fields(str(e))
              })
              raise

metadata:
  priority: high
  version: 1.0
  tags:
    - security
    - protection
    - compliance
  changelog:
    - 1.0: Initial version with comprehensive security guidelines 