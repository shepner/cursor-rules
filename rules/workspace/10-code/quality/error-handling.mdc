---
description: Guidelines for error handling and recovery
globs: ["*.py", "*.sql", "*.json", "*.yaml", "*.yml"]
alwaysApply: true
---
# Error Handling Guidelines

Rules for consistent error handling and recovery across the codebase.

<rule>
name: error_handling
description: Standards for handling errors, logging, and recovery procedures
filters:
  # Match Python files
  - type: file_extension
    pattern: "\\.py$"
  # Match SQL files
  - type: file_extension
    pattern: "\\.sql$"
  # Match config files
  - type: file_extension
    pattern: "\\.(json|ya?ml)$"
  # Match error handling related content
  - type: content
    pattern: "(error|exception|try|catch|except|finally|raise|log\\.|logger)"

actions:
  - type: suggest
    message: |
      When handling errors:

      1. Error Logging:
         - Log raw values when conversion fails
         - Include detailed error messages
         - Use appropriate log levels
         - Include stack traces for debugging
         - Log error context
         - Track error frequency

      2. Error Handling:
         - Handle "Not found" errors separately
         - Implement appropriate retry logic
         - Raise specific exceptions with context
         - Handle timeout errors gracefully
         - Implement circuit breakers
         - Log recovery attempts

      3. Data Validation Errors:
         - Log invalid data samples
         - Track validation failure patterns
         - Handle missing required fields
         - Report data quality issues
         - Implement data cleanup procedures
         - Document validation rules

      4. System Errors:
         - Handle connection failures
         - Monitor system resources
         - Log system state
         - Implement graceful degradation
         - Handle service interruptions
         - Track system recovery

      5. Error Recovery:
         - Implement rollback procedures
         - Clean up partial operations
         - Restore consistent state
         - Log recovery steps
         - Verify recovery success
         - Document recovery procedures

examples:
  - input: |
      # Bad: Poor error handling
      try:
          process_data(data)
      except Exception as e:
          print(f"Error: {e}")

      # Good: Comprehensive error handling
      def process_with_recovery(data):
          try:
              # Log attempt
              logging.info(f"Processing data batch {data.id}")
              
              # Validate input
              if not validate_data(data):
                  raise ValidationError(f"Invalid data: {data.head()}")
              
              result = process_data(data)
              
              # Verify result
              if not validate_result(result):
                  raise ProcessingError(f"Invalid result: {result}")
              
              return result
              
          except ValidationError as e:
              # Log validation failures
              logging.error(f"Validation failed: {e}")
              logging.debug(f"Failed data sample: {data.head()}")
              raise
              
          except ProcessingError as e:
              # Log processing failures
              logging.error(f"Processing failed: {e}")
              # Attempt recovery
              if can_recover(data):
                  logging.info("Attempting recovery")
                  return process_with_recovery(clean_data(data))
              raise
              
          except Exception as e:
              # Log unexpected errors
              logging.exception("Unexpected error during processing")
              # Implement circuit breaker
              increment_error_count()
              if should_break_circuit():
                  pause_processing()
              raise

metadata:
  priority: high
  version: 1.0
  tags:
    - error-handling
    - logging
    - recovery
  changelog:
    - 1.0: Initial version with comprehensive error handling guidelines 