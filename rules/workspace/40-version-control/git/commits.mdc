---
description: Guidelines for using conventional commits format
globs: ["*"]
alwaysApply: true
---
# Conventional Commits Guidelines

Rules for automatically committing changes using conventional commits format.

<rule>
name: conventional-commits
description: Standards for commit messages using conventional commits format
filters:
  # Match build success events
  - type: event
    pattern: "build_success"
  # Match file changes
  - type: file_change
    pattern: "*"
  # Match commit-related content
  - type: content
    pattern: "(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)"

actions:
  - type: reject
    conditions:
      # Reject non-conventional commit messages
      - pattern: "^(?!feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\\([\\w-]+\\))?:"
        message: "Commit message must follow conventional commits format"
      # Reject missing scopes
      - pattern: "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(?!\\([\\w-]+\\)):"
        message: "Commit message must include a scope"
      # Reject improper descriptions
      - pattern: "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)\\([\\w-]+\\):\\s*$"
        message: "Commit message must include a description"

  - type: execute
    command: |
      # Extract the change type and scope from the changes
      CHANGE_TYPE=""
      case "$CHANGE_DESCRIPTION" in
        *"add"*|*"create"*|*"implement"*) CHANGE_TYPE="feat";;
        *"fix"*|*"correct"*|*"resolve"*) CHANGE_TYPE="fix";;
        *"refactor"*|*"restructure"*) CHANGE_TYPE="refactor";;
        *"test"*) CHANGE_TYPE="test";;
        *"doc"*|*"comment"*) CHANGE_TYPE="docs";;
        *"style"*|*"format"*) CHANGE_TYPE="style";;
        *"perf"*|*"optimize"*) CHANGE_TYPE="perf";;
        *"build"*|*"ci"*) CHANGE_TYPE="build";;
        *"revert"*) CHANGE_TYPE="revert";;
        *) CHANGE_TYPE="chore";;
      esac

      # Extract scope from file path
      SCOPE=$(dirname "$FILE" | tr '/' '-')

      # Commit the changes
      git add "$FILE"
      git commit -m "$CHANGE_TYPE($SCOPE): $CHANGE_DESCRIPTION"

  - type: suggest
    message: |
      When creating commit messages:

      1. Format:
         <type>(<scope>): <description>

         [optional body]

         [optional footer(s)]

      2. Types:
         - feat: A new feature
         - fix: A bug fix
         - docs: Documentation only changes
         - style: Changes that do not affect the meaning of the code
         - refactor: A code change that neither fixes a bug nor adds a feature
         - perf: A code change that improves performance
         - test: Adding missing tests or correcting existing tests
         - chore: Changes to the build process or auxiliary tools
         - build: Changes that affect the build system or external dependencies
         - ci: Changes to CI configuration files and scripts
         - revert: Reverts a previous commit

      3. Scope:
         - Derived from file path or component name
         - Should be lowercase and hyphen-separated
         - Must be meaningful and consistent
         - Can include multiple parts (e.g., auth-server)

      4. Description:
         - Use imperative mood ("add" not "added")
         - Don't capitalize first letter
         - No period at the end
         - Be clear and concise
         - Include relevant details

      5. Body (Optional):
         - Provide context
         - Explain motivation
         - Compare with previous behavior
         - Use multiple lines if needed

      6. Footer (Optional):
         - Reference issues
         - Note breaking changes
         - Mention reviewers
         - Add metadata

examples:
  - input: |
      # After adding a new feature
      CHANGE_DESCRIPTION="add user authentication function"
      FILE="src/auth/login.ts"
    output: |
      feat(src-auth): add user authentication function

      Implements JWT-based authentication with refresh tokens.
      
      BREAKING CHANGE: Authentication now requires JWT tokens.
      Fixes #123

  - input: |
      # After fixing a bug
      CHANGE_DESCRIPTION="fix incorrect date parsing"
      FILE="lib/utils/date.js"
    output: |
      fix(lib-utils): fix incorrect date parsing
      
      - Handles timezone offsets correctly
      - Adds validation for invalid dates
      
      Fixes #456

  - input: |
      # After updating documentation
      CHANGE_DESCRIPTION="update API documentation"
      FILE="docs/api/endpoints.md"
    output: |
      docs(docs-api): update API documentation
      
      - Add new endpoint descriptions
      - Update authentication examples
      - Fix typos and formatting

metadata:
  priority: high
  version: 1.0
  tags:
    - git
    - commits
    - conventions
    - automation
  changelog:
    - 1.0: Initial version with comprehensive conventional commits guidelines
</rule> 