# Security Deception Standards

Rules for implementing comprehensive security deception capabilities.

<rule>
name: security-deceive
description: Standards for implementing security deception mechanisms aligned with security capabilities
filters:
  - type: file_extension
    pattern: "\\.(py|js|ts|java|cpp|cs|go|rs|rb|php|yaml|yml|json|xml|conf|properties)$"
  - type: content
    pattern: "(deceive|honeypot|decoy|trap|fake|misinform|misdirect|obfuscate)"

actions:
  - type: validate
    conditions:
      # Deception Implementation Validations
      - pattern: "\\b(?:honeypot|decoy).*?\\b(?:production|real).*?\\b(?:data|credentials)\\b"
        message: "Never use real data or credentials in deception systems"
      
      # Monitoring Validations
      - pattern: "\\b(?:decoy|trap).*?\\b(?:without|no).*?\\b(?:monitor|alert|log)\\b"
        message: "Ensure proper monitoring of deception systems"
      
      # Isolation Validations
      - pattern: "\\b(?:honeypot|decoy).*?\\b(?:direct|connected|linked).*?\\b(?:production|real)\\b"
        message: "Maintain proper isolation of deception systems"
      
      # Alert Validations
      - pattern: "\\b(?:trap|decoy).*?\\b(?:trigger|alert).*?\\b(?:suppress|ignore|silent)\\b"
        message: "Properly handle and alert on deception system triggers"

  - type: suggest
    message: |
      Implement deception following these capability areas:

      1. Honeypot Systems:
         - Network Honeypots
         - Service Honeypots
         - Application Honeypots
         - Data Honeypots
         - User Honeypots
         - Token Honeypots
         - Credential Honeypots

      2. Decoy Resources:
         - Decoy Files
         - Decoy Services
         - Decoy Accounts
         - Decoy Networks
         - Decoy Systems
         - Decoy Data
         - Decoy APIs

      3. Trap Systems:
         - Network Traps
         - Service Traps
         - Access Traps
         - Data Traps
         - Command Traps
         - Session Traps
         - Resource Traps

      4. Deception Monitoring:
         - Access Monitoring
         - Activity Monitoring
         - Interaction Monitoring
         - Behavior Monitoring
         - Traffic Monitoring
         - Resource Monitoring
         - Alert Management

      5. Deception Response:
         - Alert Response
         - Threat Response
         - Attack Response
         - Incident Response
         - Access Response
         - System Response
         - Network Response

      6. Deception Management:
         - System Management
         - Resource Management
         - Alert Management
         - Configuration Management
         - Deployment Management
         - Maintenance Management
         - Review Management

examples:
  - input: |
      # Bad: Poor deception implementation
      def setup_honeypot():
          system = create_fake_system()
          system.use_production_data()  # Using real data
          return system  # No monitoring
      
      # Good: Comprehensive deception
      from typing import Dict, Any, Optional
      import logging
      from datetime import datetime
      import json

      class DeceptionManager:
          def __init__(self):
              self._logger = logging.getLogger("security.deception")
              self._honeypot_manager = HoneypotManager()
              self._alert_manager = AlertManager()
              
          def deploy_deception_system(self, config: Dict[str, Any]) -> str:
              """Deploy deception system with proper isolation and monitoring."""
              try:
                  # Generate system ID
                  system_id = self._generate_system_id()
                  
                  # Create isolated environment
                  env = self._create_isolated_environment(system_id)
                  
                  # Deploy decoy resources
                  resources = self._deploy_decoy_resources(system_id, config)
                  
                  # Configure monitoring
                  self._setup_deception_monitoring(system_id, resources)
                  
                  # Configure alerts
                  self._configure_alert_system(system_id)
                  
                  # Verify deployment
                  self._verify_deception_system(system_id)
                  
                  return system_id
                  
              except Exception as e:
                  self._logger.error(f"Deception deployment error: {str(e)}", 
                                   exc_info=True)
                  self._handle_deployment_failure(config, e)
                  return None
                  
          def _deploy_decoy_resources(self, system_id: str, 
                                    config: Dict[str, Any]) -> Dict[str, Any]:
              """Deploy decoy resources with proper isolation."""
              try:
                  resources = {
                      "files": self._deploy_decoy_files(config.get("files", [])),
                      "services": self._deploy_decoy_services(config.get("services", [])),
                      "accounts": self._deploy_decoy_accounts(config.get("accounts", [])),
                      "networks": self._deploy_decoy_networks(config.get("networks", []))
                  }
                  
                  # Verify resource deployment
                  self._verify_decoy_resources(system_id, resources)
                  
                  return resources
                  
              except Exception as e:
                  self._logger.error(f"Resource deployment error: {str(e)}", 
                                   exc_info=True)
                  return None
                  
          def _handle_deception_trigger(self, trigger: Dict[str, Any]) -> None:
              """Handle deception system trigger with proper response."""
              try:
                  # Log trigger event
                  self._log_trigger_event(trigger)
                  
                  # Analyze trigger
                  analysis = self._analyze_trigger(trigger)
                  
                  # Generate alert
                  if analysis["severity"] >= self._alert_threshold:
                      self._generate_deception_alert(trigger, analysis)
                      
                  # Update monitoring
                  self._update_monitoring_state(trigger, analysis)
                  
                  # Execute response actions
                  self._execute_response_actions(trigger, analysis)
                  
              except Exception as e:
                  self._logger.error(f"Trigger handling error: {str(e)}", 
                                   exc_info=True)
                  self._escalate_trigger_failure(trigger, e)

metadata:
  priority: critical
  version: 1.0
  tags:
    - security
    - deception
    - honeypot
    - decoy
    - trap
    - monitoring
  changelog:
    - 1.0: Initial version with comprehensive deception capabilities 