---
description: Guidelines for logging practices and standards
globs: ["*.py", "*.sql", "*.json", "*.yaml", "*.yml"]
alwaysApply: true
---
# Logging Guidelines

Rules for consistent logging practices across the codebase.

<rule>
name: logging-standards
description: Standards for logging, monitoring, and observability
filters:
  # Match Python files
  - type: file_extension
    pattern: "\\.py$"
  # Match SQL files
  - type: file_extension
    pattern: "\\.sql$"
  # Match config files
  - type: file_extension
    pattern: "\\.(json|ya?ml)$"
  # Match logging related content
  - type: content
    pattern: "(log\\.|logger|logging|debug|info|warning|error|critical|trace|fatal)"

actions:
  - type: reject
    conditions:
      # Reject print statements for logging
      - pattern: "print\\(['\"](?:error|warning|info|debug)"
        message: "Use proper logging methods instead of print statements"
      # Reject logging without context
      - pattern: "logging\\.(info|error|warning|debug)\\(['\"][^{]*['\"]\\)"
        message: "Include context in log messages using structured logging"
      # Reject logging of sensitive data
      - pattern: "(password|secret|key|token|credential).*logging"
        message: "Do not log sensitive information directly. Use masking."

  - type: suggest
    message: |
      When implementing logging:

      1. General Logging:
         - Use appropriate log levels (DEBUG, INFO, WARNING, ERROR)
         - Include timestamp in log messages
         - Add context to log entries
         - Use consistent log format
         - Implement log rotation
         - Configure log retention

      2. Data Logging:
         - Log schema types before and after conversion
         - Log sample values for critical fields
         - Include raw values in error messages
         - Mask sensitive data
         - Log data statistics
         - Track data transformations

      3. Operation Logging:
         - Log operation start and end
         - Track operation duration
         - Log operation parameters
         - Monitor operation progress
         - Record operation status
         - Log cleanup activities

      4. Performance Logging:
         - Track resource usage
         - Monitor operation timing
         - Log bottlenecks
         - Record optimization attempts
         - Track query performance
         - Monitor system metrics

      5. Security Logging:
         - Mask sensitive information
         - Log access attempts
         - Track authorization failures
         - Monitor suspicious activities
         - Log configuration changes
         - Record security events

examples:
  - input: |
      # Bad: Poor logging practices
      logging.info("Processing data")  # No context
      print("Error: Operation failed")  # Using print
      logging.error(f"Password: {password}")  # Logging sensitive data
      try:
          process_data()
      except Exception as e:
          logging.error(str(e))  # No context

      # Good: Comprehensive logging
      def process_with_logging(data, operation_id):
          logger = logging.getLogger(__name__)
          
          # Start operation logging
          start_time = time.time()
          logger.info(f"Starting operation {operation_id}", extra={
              'operation_id': operation_id,
              'data_size': len(data),
              'timestamp': datetime.utcnow().isoformat()
          })
          
          try:
              # Log data sample (masked)
              logger.debug("Processing data sample", extra={
                  'sample': mask_sensitive_data(data.head()),
                  'schema': data.dtypes.to_dict()
              })
              
              result = process_data(data)
              
              # Log performance metrics
              duration = time.time() - start_time
              logger.info(f"Operation completed successfully", extra={
                  'operation_id': operation_id,
                  'duration_seconds': duration,
                  'records_processed': len(result)
              })
              
              return result
              
          except Exception as e:
              # Log detailed error information
              logger.error("Operation failed", extra={
                  'operation_id': operation_id,
                  'error_type': type(e).__name__,
                  'duration_seconds': time.time() - start_time,
                  'stack_trace': traceback.format_exc()
              })
              raise

metadata:
  priority: high
  version: 1.0
  tags:
    - logging
    - monitoring
    - observability
  changelog:
    - 1.0: Initial version with comprehensive logging guidelines 