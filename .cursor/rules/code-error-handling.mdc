---
description: 
globs: 
alwaysApply: true
---
---
description: Standards for implementing robust error handling across the project
globs: ["*.py", "*.sql", "*.sh"]
alwaysApply: false
---

# Code Error Handling Standards

Guidelines for implementing robust error handling across different programming languages and environments.

<rule>
name: code-error-handling
description: Standards for implementing robust error handling across the project
filters:
  - type: file_extension
    pattern: "\.(py|sql|sh)$"
  - type: content
    pattern: "(try|except|catch|error|raise|throw)"
    max_complexity: 3

actions:
  - type: reject
    conditions:
      # Python error handling validation
      - pattern: "except\s*:"
        message: "Avoid bare except clauses - specify exception types"
      - pattern: "except\s+Exception\s*:"
        message: "Avoid catching generic Exception - use specific exception types"
      - pattern: "print\s*\(.*error"
        message: "Use proper logging instead of print statements for errors"
      
      # SQL error handling validation
      - pattern: "BEGIN\s+TRANSACTION(?!.*BEGIN\s+TRY)"
        message: "Wrap transactions in TRY/CATCH blocks"
      - pattern: "RAISERROR\s*\([^,]+,\s*[^,]+,\s*[^,]+\)"
        message: "Include error details in RAISERROR calls"
      
      # Shell script error handling validation
      - pattern: "^\s*[^#].*&&\s*[^#]"
        message: "Use proper error checking instead of && chaining"
      - pattern: "rm\s+.*\s*;"
        message: "Use proper cleanup in exit traps"

  - type: validate
    conditions:
      # Python validation
      - check: "has_proper_exception_handling"
        message: "Missing proper exception handling"
      - check: "has_error_logging"
        message: "Missing error logging"
      - check: "has_resource_cleanup"
        message: "Missing resource cleanup"
      
      # SQL validation
      - check: "has_transaction_management"
        message: "Missing transaction management"
      - check: "has_error_details"
        message: "Missing error details in error handling"
      
      # Shell validation
      - check: "has_error_checking"
        message: "Missing error checking"
      - check: "has_cleanup_trap"
        message: "Missing cleanup trap"

  - type: suggest
    message: |
      When implementing error handling:

      1. Python Error Handling:
         - Use specific exception types
         - Implement proper exception hierarchies
         - Log errors with context and stack traces
         - Clean up resources in finally blocks
         - Document error conditions
         - Include error recovery mechanisms
         - Provide meaningful error messages

      2. SQL Error Handling:
         - Use proper transaction management
         - Handle deadlocks with retry logic
         - Validate input parameters
         - Log database errors with context
         - Implement retry logic
         - Use appropriate error severity
         - Include error details

      3. Shell Script Error Handling:
         - Check command return codes
         - Implement cleanup in exit traps
         - Use set -e for immediate failure
         - Log errors with timestamps
         - Handle signals properly
         - Clean up temporary files
         - Provide meaningful messages

examples:
  - input: |
      # Bad: Poor error handling
      try:
          process_data()
      except:
          print("Error occurred")

      # Good: Proper error handling
      try:
          process_data()
      except DataProcessingError as e:
          logger.error(f"Data processing failed: {e}", exc_info=True)
          raise
      finally:
          cleanup_resources()

  - input: |
      # Bad: Poor SQL error handling
      BEGIN TRANSACTION
      UPDATE users SET status = 'active'
      COMMIT

      # Good: Proper SQL error handling
      BEGIN TRY
          BEGIN TRANSACTION
          UPDATE users SET status = 'active'
          COMMIT
      END TRY
      BEGIN CATCH
          ROLLBACK
          DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE()
          RAISERROR(@ErrorMessage, 16, 1)
      END CATCH

  - input: |
      # Bad: Poor shell error handling
      process_data > output.txt
      rm temp_file

      # Good: Proper shell error handling
      #!/bin/bash
      set -e
      
      cleanup() {
          rm -f "$temp_file"
      }
      
      trap cleanup EXIT
      
      temp_file=$(mktemp)
      if ! process_data > "$temp_file"; then
          echo "Error: Failed to process data" >&2
          exit 1
      fi

metrics:
  - name: error_handling_coverage
    type: gauge
    labels: ["language", "file"]
  - name: error_handling_violations
    type: counter
    labels: ["language", "violation_type"]
  - name: error_logging_coverage
    type: gauge
    labels: ["language", "file"]
  - name: resource_cleanup_coverage
    type: gauge
    labels: ["language", "file"]

metadata:
  priority: high
  version: 2.0
  tags:
    - error-handling
    - python
    - sql
    - shell
    - logging
    - cleanup
    - validation
  changelog:
    - 2.0: Updated with comprehensive error handling standards and validation
    - 1.0: Initial version with basic error handling guidelines
</rule>

# Error Handling Guidelines

## Overview
This document defines standards for implementing robust error handling across the project. Proper error handling is crucial for maintaining system reliability, debugging issues, and providing a good user experience.

## Configuration
```yaml
globs: ["*.py", "*.sql", "*.sh"]
priority: high
```

## Rules

### Python Error Handling
1. Use specific exception types instead of catching generic exceptions
2. Implement proper exception hierarchies for domain-specific errors
3. Log all errors with appropriate context and stack traces
4. Clean up resources in finally blocks
5. Document error conditions and handling in docstrings
6. Include error recovery mechanisms where appropriate
7. Provide meaningful error messages to users

### SQL Error Handling
1. Implement proper transaction management with BEGIN/COMMIT/ROLLBACK
2. Handle deadlocks appropriately with retry logic
3. Validate input parameters before execution
4. Log database errors with context
5. Implement retry logic for transient failures
6. Use appropriate error severity levels
7. Include error details in logs

### Shell Script Error Handling
1. Check return codes of all commands
2. Implement proper cleanup in exit traps
3. Use set -e for immediate failure on errors
4. Log errors with timestamps and context
5. Implement proper signal handling
6. Clean up temporary files and resources
7. Provide meaningful error messages

## Examples

### Good Python Error Handling
```python
class DataProcessingError(Exception):
    """Base exception for data processing errors."""
    pass

def process_data(data: dict) -> None:
    try:
        validate_input(data)
        result = transform_data(data)
        save_to_database(result)
    except ValidationError as e:
        logger.error(f"Invalid input data: {e}", exc_info=True)
        raise DataProcessingError(f"Data validation failed: {e}")
    except DatabaseError as e:
        logger.error(f"Database operation failed: {e}", exc_info=True)
        raise DataProcessingError(f"Could not save data: {e}")
    finally:
        cleanup_resources()
```

### Good SQL Error Handling
```sql
BEGIN TRANSACTION;
    DECLARE @ErrorMessage NVARCHAR(4000);
    BEGIN TRY
        -- Perform operations
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH;
```

### Good Shell Script Error Handling
```bash
#!/bin/bash
set -e

cleanup() {
    rm -f "$temp_file"
}

trap cleanup EXIT

temp_file=$(mktemp)
if ! process_data > "$temp_file"; then
    echo "Error: Failed to process data" >&2
    exit 1
fi
```

## Best Practices
1. Fail fast and explicitly
2. Provide meaningful error messages
3. Include error recovery mechanisms
4. Log errors with stack traces
5. Handle resource cleanup
6. Use appropriate error severity levels
7. Document error handling in code

## Version History
- 1.0: Initial version
- 1.1: Added SQL error handling guidelines and shell script examples 
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH;
```

## Version History
- 1.0: Initial version
- 1.1: Added SQL error handling guidelines 