---
description: Guidelines for selecting the most appropriate programming language for different tasks
globs: ["*"]
alwaysApply: true
---
---
description: Language Selection Guidelines
globs: [
  # Project initialization files
  "**/README.md",
  "**/README",
  "**/.gitignore",
  "**/LICENSE",
  "**/CONTRIBUTING.md",
  "**/ARCHITECTURE*.md",
  "**/docs/ARCHITECTURE*.md",
  "**/docs/design.md",
  "**/docs/DESIGN.md",
  "**/docs/technical-spec.md",
  "**/docs/TECHNICAL-SPEC.md",
  "**/docs/requirements.md",
  "**/docs/REQUIREMENTS.md"
]
alwaysApply: false
---

# Language Selection Guidelines

Rules for choosing the most appropriate programming language based on project requirements.

<rule>
name: language-selection
description: Standards for selecting programming languages based on task requirements
filters:
  # Match project configuration files
  - type: filename
    pattern: "(requirements\\.txt|Cargo\\.toml|cpanfile|package\\.json|pom\\.xml|\\.csproj)$"
  # Match common source files
  - type: file_extension
    pattern: "\\.(py|rs|pl|pm|java|js|ts|cs)$"

actions:
  - type: reject
    conditions:
      # Reject Java-based technologies unless explicitly required
      - pattern: "\\.(java|kt|groovy|scala)$"
        message: "Avoid Java-based technologies unless specifically required by external constraints"
      # Reject Microsoft technologies
      - pattern: "\\.(cs|vb|fs|csproj|sln)$"
        message: "Avoid Microsoft-based technologies unless specifically required by external constraints"
      # Reject unnecessary complexity
      - pattern: "spring|hibernate|ejb|jsf"
        message: "Avoid heavyweight frameworks when lighter alternatives exist"

  - type: suggest
    message: |
      When selecting a programming language:

      1. Python (Primary Choice):
         Best for:
         - Data processing and analysis
         - Machine learning and AI
         - Web applications (FastAPI, Flask)
         - Scripting and automation
         - API development
         - Quick prototyping
         - System administration
         - Text processing
         Advantages:
         - Extensive library ecosystem
         - Excellent readability
         - Fast development speed
         - Great community support
         - Strong data science tools

      2. Rust (Performance Critical):
         Best for:
         - System programming
         - Performance-critical components
         - Concurrent applications
         - Memory-sensitive operations
         - Low-level networking
         - WebAssembly development
         - Command-line tools
         - Embedded systems
         Advantages:
         - Memory safety without GC
         - Excellent performance
         - Strong concurrency support
         - Cross-platform compatibility
         - Modern tooling

      3. Perl (Text Processing):
         Best for:
         - Text processing
         - System administration
         - Legacy system maintenance
         - Quick scripts
         - Regular expression heavy tasks
         - CGI scripts
         - Log processing
         Advantages:
         - Powerful regex support
         - Built-in text processing
         - System interaction
         - One-liners
         - CPAN ecosystem

      Language Selection Matrix:

      1. Choose Python when:
         - Rapid development is priority
         - Data processing is main focus
         - Need extensive libraries
         - Building web applications
         - Creating automation scripts
         - Prototyping solutions
         - Team familiarity is important

      2. Choose Rust when:
         - Performance is critical
         - Memory safety is crucial
         - Building system tools
         - Need fine-grained control
         - Concurrent processing required
         - Creating stable binaries
         - Security is paramount

      3. Choose Perl when:
         - Heavy text processing
         - Complex regex operations
         - System administration tasks
         - Quick scripting needed
         - Working with legacy systems
         - Log file analysis
         - One-off scripts

      4. Consider Other Languages Only When:
         - External requirements mandate
         - Integrating with existing systems
         - Team constraints exist
         - Specific libraries required
         - Platform limitations exist

examples:
  - input: |
      # Bad: Using Java for a simple script
      public class DataProcessor {
          public static void main(String[] args) {
              // Overcomplicated for simple tasks
          }
      }

      # Good: Using Python for data processing
      """
      @file: process_data.py
      Simple data processing script with clear functionality.
      """
      
      import pandas as pd
      from pathlib import Path
      
      def process_data(input_file: Path) -> pd.DataFrame:
          """Process data file efficiently."""
          return pd.read_csv(input_file).pipe(transform_data)

      # Good: Using Rust for performance-critical component
      // process_engine.rs
      pub struct ProcessEngine {
          config: Config,
      }
      
      impl ProcessEngine {
          pub fn process_batch(&self, data: &[u8]) -> Result<Vec<u8>> {
              // High-performance data processing
          }
      }

      # Good: Using Perl for text processing
      #!/usr/bin/perl
      use strict;
      use warnings;
      
      while (<>) {
          if (/pattern/) {
              # Efficient text processing
          }
      }

metadata:
  priority: high
  version: 1.0
  tags:
    - language-selection
    - best-practices
    - architecture
    - performance
  changelog:
    - 1.0: Initial version with comprehensive language selection guidelines
</rule> 