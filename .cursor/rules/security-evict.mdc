---
description: 
globs: 
alwaysApply: false
---
---
description: "Rules for implementing comprehensive security eviction capabilities."
globs: ["**/*.{py,js,ts,java,cpp,cs,go,rs,rb,php,yaml,yml,json,xml,conf,properties}"]
alwaysApply: false
---

# Security Eviction Standards

Rules for implementing comprehensive security eviction capabilities.

<rule>
name: security-evict
description: Standards for implementing security eviction mechanisms aligned with security capabilities
filters:
  - type: file_extension
    pattern: "\\.(py|js|ts|java|cpp|cs|go|rs|rb|php|yaml|yml|json|xml|conf|properties)$"
  - type: content
    pattern: "(evict|remove|eject|terminate|block|revoke|disable|clean)"

actions:
  - type: validate
    conditions:
      # Eviction Process Validations
      - pattern: "\\b(?:evict|remove).*?\\b(?:without|no).*?\\b(?:log|audit|record)\\b"
        message: "Log all eviction actions"
      
      # Clean-up Validations
      - pattern: "\\b(?:clean|remove).*?\\b(?:partial|incomplete).*?\\b(?:state|data|resource)\\b"
        message: "Ensure complete clean-up during eviction"
      
      # Access Revocation Validations
      - pattern: "\\b(?:revoke|disable).*?\\b(?:access|permission|token).*?\\b(?:single|partial)\\b"
        message: "Implement comprehensive access revocation"
      
      # State Management Validations
      - pattern: "\\b(?:terminate|stop).*?\\b(?:without|no).*?\\b(?:state|cleanup|verification)\\b"
        message: "Properly manage state during eviction"

  - type: suggest
    message: |
      Implement eviction following these capability areas:

      1. Process Eviction:
         - Process Termination
         - Resource Cleanup
         - State Management
         - Memory Cleanup
         - Handle Closure
         - Thread Termination
         - Process Verification

      2. Access Eviction:
         - Token Revocation
         - Session Termination
         - Permission Revocation
         - Credential Revocation
         - Access Removal
         - Role Revocation
         - Identity Cleanup

      3. Resource Eviction:
         - Resource Release
         - Connection Closure
         - File Cleanup
         - Socket Closure
         - Lock Release
         - Cache Cleanup
         - Buffer Cleanup

      4. System Eviction:
         - Service Termination
         - System Cleanup
         - Configuration Reset
         - State Cleanup
         - Log Management
         - Backup Management
         - System Verification

      5. Network Eviction:
         - Connection Termination
         - Route Removal
         - Firewall Updates
         - DNS Cleanup
         - Protocol Shutdown
         - Network Cleanup
         - Traffic Management

      6. Data Eviction:
         - Data Removal
         - Cache Invalidation
         - Storage Cleanup
         - Index Cleanup
         - Temporary Data
         - Metadata Cleanup
         - Reference Cleanup

examples:
  - input: |
      # Bad: Poor eviction implementation
      def remove_user(user_id):
          db.delete_user(user_id)  # Incomplete cleanup
          return True  # No verification
      
      # Good: Comprehensive eviction
      from typing import Dict, Any, Optional
      import logging
      from datetime import datetime
      import json

      class SecurityEviction:
          def __init__(self):
              self._logger = logging.getLogger("security.eviction")
              self._resource_manager = ResourceManager()
              self._access_manager = AccessManager()
              
          def evict_entity(self, entity_id: str, config: Dict[str, Any]) -> bool:
              """Perform comprehensive security eviction."""
              try:
                  # Log eviction initiation
                  eviction_id = self._log_eviction_start(entity_id)
                  
                  # Create eviction plan
                  plan = self._create_eviction_plan(entity_id, config)
                  
                  # Execute eviction
                  success = self._execute_eviction(eviction_id, plan)
                  
                  # Verify eviction
                  if success:
                      success = self._verify_eviction(eviction_id, plan)
                  
                  # Document eviction
                  self._document_eviction(eviction_id, plan, success)
                  
                  return success
                  
              except Exception as e:
                  self._logger.error(f"Eviction error: {str(e)}", exc_info=True)
                  self._handle_eviction_failure(entity_id, e)
                  return False
                  
          def _execute_eviction(self, eviction_id: str, 
                              plan: Dict[str, Any]) -> bool:
              """Execute eviction plan with proper cleanup and verification."""
              try:
                  # Revoke access
                  self._revoke_all_access(plan["entity_id"])
                  
                  # Terminate sessions
                  self._terminate_active_sessions(plan["entity_id"])
                  
                  # Remove resources
                  self._cleanup_resources(plan["resources"])
                  
                  # Clean data
                  self._remove_entity_data(plan["entity_id"])
                  
                  # Update system state
                  self._update_system_state(plan["entity_id"])
                  
                  return True
                  
              except Exception as e:
                  self._logger.error(f"Eviction execution error: {str(e)}", 
                                   exc_info=True)
                  return False
                  
          def _verify_eviction(self, eviction_id: str, plan: Dict[str, Any]) -> bool:
              """Verify complete eviction with comprehensive checks."""
              try:
                  checks = [
                      self._verify_access_revocation(plan["entity_id"]),
                      self._verify_session_termination(plan["entity_id"]),
                      self._verify_resource_cleanup(plan["resources"]),
                      self._verify_data_removal(plan["entity_id"]),
                      self._verify_system_state(plan["entity_id"])
                  ]
                  
                  return all(checks)
                  
              except Exception as e:
                  self._logger.error(f"Eviction verification error: {str(e)}", 
                                   exc_info=True)
                  return False

metadata:
  priority: critical
  version: 1.0
  tags:
    - security
    - eviction
    - cleanup
    - access-control
    - state-management
  changelog:
    - 1.0: Initial version with comprehensive eviction capabilities 