---
description: Standards for code documentation and docstring formatting
globs: ["*.py", "*.js", "*.ts", "*.java", "*.cpp", "*.cs", "*.go", "*.rs", "*.rb", "*.php"]
alwaysApply: true
---
---
description: "Code Documentation Guidelines"
globs: ["**/*.{py,js,ts,java,cpp,cs,go,rs,rb,php}"]
#alwaysApply: true
---

# Code Documentation Guidelines

Rules for ensuring code is well-documented and follows language-specific documentation standards.

<rule>
name: code-documentation
description: Standards for code documentation and docstring formatting
filters:
  # Match source code files
  - type: file_extension
    pattern: "\\.(py|js|ts|java|cpp|cs|go|rs|rb|php)$"
  # Match documentation patterns
  - type: content
    pattern: "(#|//|/\\*|'''|\"\"\"|///|<!--)"

actions:
  - type: validate
    conditions:
      # Reject missing module/file documentation
      - pattern: "^(?!(\\s*[#/*'\"].*@file|\\s*[#/*'\"].*@module|\\s*[#/*'\"].*@package))"
        message: "Add file-level documentation explaining the module's purpose"
      # Reject undocumented public functions/classes
      - pattern: "^\\s*(public\\s+|export\\s+)?(?:class|function|def)\\s+\\w+.*?(?!\\s*[#/*'\"])"
        message: "Document public functions and classes with description, parameters, and return values"

  - type: suggest
    message: |
      When documenting code:

      1. File Documentation:
         - Start with file-level documentation
         - Explain the module's purpose
         - List major components
         - Document dependencies
         - Include usage examples
         - Note any limitations
         - Document version history

      2. Function Documentation:
         - Document purpose and usage
         - List all parameters
         - Describe return values
         - Note side effects
         - Document exceptions
         - Include examples
         - Note performance implications

      3. Class Documentation:
         - Document class purpose
         - List public methods
         - Document inheritance
         - Note dependencies
         - Include usage examples
         - Document lifecycle
         - Note thread safety

      4. Code Comments:
         - Explain complex logic
         - Document assumptions
         - Note TODO items
         - Mark deprecated code
         - Explain workarounds
         - Document limitations
         - Note performance considerations

examples:
  - input: |
      # Bad: Missing documentation
      def process_data(data):
          result = {}
          for item in data:
              if item.active:
                  result[item.id] = item.value
          return result

      # Good: Well-documented code
      def process_data(data: list[dict]) -> dict:
          """Process input data and return filtered results.
          
          Args:
              data: List of dictionaries containing data points
              Each dictionary must have 'active', 'id', and 'value' keys.
              
          Returns:
              Dictionary mapping active item IDs to their values.
              
          Raises:
              ValueError: If data is empty or missing required keys.
          """
          if not data:
              raise ValueError("Input data cannot be empty")
              
          result = {}
          for item in data:
              if not all(k in item for k in ('active', 'id', 'value')):
                  raise ValueError("Each item must have 'active', 'id', and 'value' keys")
              if item['active']:
                  result[item['id']] = item['value']
          return result

metadata:
  priority: high
  version: 1.0
  tags:
    - documentation
    - docstrings
    - comments
  changelog:
    - 1.0: Initial version with comprehensive documentation guidelines 