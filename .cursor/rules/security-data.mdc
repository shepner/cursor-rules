---
description: 
globs: 
alwaysApply: true
---
---
description: "Rules for implementing secure data handling practices across the data lifecycle."
globs: ["**/*.{py,js,ts,java,cpp,cs,go,rs,rb,php,sql,hql,yaml,yml,json}"]
alwaysApply: false
---

# Data Security Standards

Rules for implementing secure data handling practices across the data lifecycle.

<rule>
name: code-data-security
description: Standards for implementing secure data handling practices aligned with security capabilities
filters:
  - type: file_extension
    pattern: "\\.(py|js|ts|java|cpp|cs|go|rs|rb|php|sql|hql|yaml|yml|json)$"
  - type: content
    pattern: "(data|storage|database|file|message|transfer|backup|archive|restore|delete)"

actions:
  - type: validate
    conditions:
      # Data Storage Validations
      - pattern: "\\b(?:store|save|write|insert).*?\\b(?:password|secret|key|token|pii|sensitive)\\b"
        message: "Ensure sensitive data is encrypted before storage"
      
      - pattern: "\\b(?:select|query).*?\\b(?:password|secret|key|token|pii|sensitive)\\b"
        message: "Implement data masking for sensitive data retrieval"
      
      # Data Transfer Validations
      - pattern: "\\b(?:send|transfer|transmit).*?\\b(?:password|secret|key|token|pii|sensitive)\\b"
        message: "Use secure protocols and encryption for data transfer"
      
      # Data Access Validations
      - pattern: "\\b(?:public|global|static).*?\\b(?:data|storage|record)\\b"
        message: "Implement proper access controls for data access"
      
      # Data Lifecycle Validations
      - pattern: "\\b(?:delete|remove|drop).*?\\b(?:data|record|file|table)\\b"
        message: "Ensure secure data deletion and lifecycle management"

  - type: suggest
    message: |
      Implement data security following these capability areas:

      1. Data Storage Security:
         - Encryption at Rest
         - Secure Storage Configuration
         - Access Controls
         - Data Classification
         - Storage Hardening
         - Backup Protection
         - Archive Security

      2. Data Transfer Security:
         - Encryption in Transit
         - Secure Protocols
         - Transfer Authentication
         - Data Integrity Checks
         - Channel Security
         - Transfer Logging
         - Error Handling

      3. Data Access Security:
         - Access Control Lists
         - Role-Based Access
         - Authentication Requirements
         - Authorization Checks
         - Session Management
         - Access Logging
         - Audit Trails

      4. Data Processing Security:
         - Input Validation
         - Output Encoding
         - Error Handling
         - Secure Algorithms
         - Resource Controls
         - Processing Logs
         - Security Checks

      5. Data Lifecycle Management:
         - Data Classification
         - Retention Policies
         - Secure Deletion
         - Data Recovery
         - Version Control
         - Change Tracking
         - Compliance Checks

      6. Data Protection Controls:
         - Privacy Controls
         - Security Controls
         - Compliance Controls
         - Audit Controls
         - Monitoring Controls
         - Incident Response
         - Risk Management

examples:
  - input: |
      # Bad: Insecure data handling
      def store_user_data(user_data):
          db.execute(f"INSERT INTO users VALUES ('{user_data}')")  # SQL Injection risk
          file.write(f"sensitive_data_{user_data}")  # Unencrypted storage
      
      # Good: Secure data handling
      from cryptography.fernet import Fernet
      from typing import Dict, Any
      import logging

      class SecureDataHandler:
          def __init__(self):
              self._encryption_key = Fernet.generate_key()
              self._cipher_suite = Fernet(self._encryption_key)
              self._data_classifier = DataClassifier()
              
          def store_data(self, data: Dict[str, Any], classification: str) -> bool:
              """Securely store data with encryption and access controls."""
              try:
                  # Classify and validate data
                  if not self._data_classifier.validate(data, classification):
                      raise ValueError("Invalid data classification")
                      
                  # Encrypt sensitive fields
                  encrypted_data = self._encrypt_sensitive_fields(data)
                  
                  # Store with access controls
                  self._store_with_acl(encrypted_data, classification)
                  
                  # Audit logging
                  self._log_data_operation("store", classification)
                  return True
                  
              except Exception as e:
                  logging.error(f"Data storage error: {str(e)}")
                  return False
                  
          def _encrypt_sensitive_fields(self, data: Dict[str, Any]) -> Dict[str, Any]:
              """Encrypt sensitive fields based on classification."""
              sensitive_fields = self._data_classifier.get_sensitive_fields()
              encrypted_data = data.copy()
              
              for field in sensitive_fields:
                  if field in encrypted_data:
                      encrypted_data[field] = self._cipher_suite.encrypt(
                          str(encrypted_data[field]).encode()
                      )
                      
              return encrypted_data

metadata:
  priority: critical
  version: 1.0
  tags:
    - security
    - data-protection
    - encryption
    - access-control
    - compliance
    - data-lifecycle
  changelog:
    - 1.0: Initial version with comprehensive data security capabilities 