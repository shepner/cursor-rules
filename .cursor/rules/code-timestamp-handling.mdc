---
description: Guidelines for handling timestamps and datetime conversions
globs: ["*.py", "*.sql", "*.json", "*.yaml", "*.yml"]
alwaysApply: true
---
---
description: Timestamp Handling Guidelines
globs: ["**/*.{py,sql,json,yml,yaml}"]
alwaysApply: false
---

# Timestamp Handling Guidelines

Rules for consistent timestamp handling and conversions across the codebase.

<rule>
name: timestamp_handling
description: Standards for handling timestamps, datetime conversions, and validation
filters:
  # Match Python files
  - type: file_extension
    pattern: "\\.py$"
  # Match SQL files
  - type: file_extension
    pattern: "\\.sql$"
  # Match config files
  - type: file_extension
    pattern: "\\.(json|ya?ml)$"
  # Match timestamp related content
  - type: content
    pattern: "(timestamp|datetime|date|time|utc|timezone)"

actions:
  - type: suggest
    message: |
      When handling timestamps:

      1. Timestamp Detection:
         - Check if field is already datetime using pd.api.types.is_datetime64_any_dtype()
         - Only attempt conversion on non-datetime fields
         - Log timestamp format before conversion
         - Verify timezone information if present

      2. Timestamp Conversion:
         - Handle None values before conversion
         - Use pd.to_datetime(format='mixed', errors='coerce') for flexible parsing
         - Log sample values after conversion
         - Handle invalid timestamp formats gracefully
         - Convert string timestamps to appropriate timezone
         - Maintain UTC consistency where required

      3. Timestamp Validation:
         - Verify timestamp range validity
         - Check for NaT (Not a Time) values
         - Log invalid timestamp formats
         - Handle timezone conversions explicitly
         - Validate timestamp precision requirements
         - Ensure consistent timestamp formatting across dataset

examples:
  - input: |
      # Bad: Inconsistent timestamp handling
      df['timestamp'] = pd.to_datetime(df['timestamp'])
      df['date'] = df['date'].astype(str)

      # Good: Consistent timestamp handling with validation
      def convert_to_timestamp(df, column):
          # Check if already datetime
          if not pd.api.types.is_datetime64_any_dtype(df[column]):
              # Log original format
              sample_values = df[column].head()
              logging.debug(f"Converting {column}, sample values: {sample_values}")
              
              # Convert with error handling
              df[column] = pd.to_datetime(
                  df[column],
                  format='mixed',
                  errors='coerce',
                  utc=True
              )
              
              # Validate conversion
              nat_count = df[column].isna().sum()
              if nat_count > 0:
                  logging.warning(f"Found {nat_count} invalid timestamps in {column}")
          
          return df

metadata:
  priority: high
  version: 1.0
  tags:
    - timestamps
    - datetime
    - validation
  changelog:
    - 1.0: Initial version with comprehensive timestamp handling guidelines 

---
description: Standards for handling ISO 8601 durations in scheduling and time intervals
globs: ["*.py", "*.json"]
alwaysApply: true
---
# ISO 8601 Duration Handling

## Overview
Standards for implementing and handling ISO 8601 durations in scheduling and time intervals.

## Rules

### Duration Format
1. Use ISO 8601 duration format for all time intervals:
   - Format: P[n]Y[n]M[n]DT[n]H[n]M[n]S
   - P is the duration designator (period)
   - T is the time designator
   - Examples:
     - PT15M = 15 minutes
     - PT1H = 1 hour
     - P1D = 1 day
     - PT1H30M = 1 hour and 30 minutes

2. Duration Validation:
   - Validate format before parsing
   - Handle invalid formats gracefully
   - Provide clear error messages
   - Use appropriate default values

3. Duration Parsing:
   - Convert to standard time units
   - Handle edge cases (e.g., months, years)
   - Maintain precision
   - Document conversion assumptions

### Implementation
```python
def parse_iso_duration(duration: str) -> timedelta:
    """Parse ISO 8601 duration string into timedelta.
    
    Args:
        duration: ISO 8601 duration string (e.g., "PT15M")
        
    Returns:
        timedelta: Parsed duration
        
    Raises:
        ValueError: If duration format is invalid
    """
    if not isinstance(duration, str):
        raise ValueError("Duration must be a string")
    
    if not duration.startswith('P'):
        raise ValueError("Duration must start with P")
        
    # Parse components...
    return timedelta(...)
```

### Configuration
1. Document duration format in configs:
```json
{
  "/*": [
    "Frequency format follows ISO 8601 duration standard:",
    "  P = Period designator",
    "  T = Time designator",
    "  nM = n Minutes",
    "  nH = n Hours",
    "  nD = n Days"
  ],
  "frequency": "PT15M"
}
```

2. Include validation in configuration loading:
```python
def load_config():
    """Load and validate configuration."""
    config = load_json_config()
    validate_durations(config)
    return config
```

### Testing
1. Test duration parsing:
```python
def test_parse_duration():
    """Test ISO 8601 duration parsing."""
    assert parse_duration("PT15M") == timedelta(minutes=15)
    assert parse_duration("PT1H") == timedelta(hours=1)
    assert parse_duration("P1D") == timedelta(days=1)
```

2. Test invalid formats:
```python
def test_invalid_duration():
    """Test invalid duration formats."""
    with pytest.raises(ValueError):
        parse_duration("15M")  # Missing P
    with pytest.raises(ValueError):
        parse_duration("PTM")  # Missing number
``` 