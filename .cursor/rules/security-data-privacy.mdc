---
description: 
globs: 
alwaysApply: true
---
---
description: "Rules for handling personally identifiable information (PII) and sensitive data."
globs: ["**/*.{py,js,ts,java,cpp,cs,go,rs,rb,php}"]
alwaysApply: true
---

# Data Privacy Standards

Rules for handling personally identifiable information (PII) and sensitive data.

<rule>
name: code-data-privacy
description: Standards for handling PII and sensitive data in accordance with privacy regulations and organizational requirements
filters:
  # Match source code files
  - type: file_extension
    pattern: "\\.(py|js|ts|java|cpp|cs|go|rs|rb|php)$"
  # Match content patterns for PII and privacy
  - type: content
    pattern: "(pii|personal|sensitive|privacy|gdpr|ccpa|hipaa|identification|contact|demographic|financial|health|education|employment|online)"

actions:
  - type: validate
    conditions:
      # Identification Attributes
      - pattern: "\\b(?:driver_license|ein|tin|full_name|immigration|visa|military_id|national_id|passport|professional_license|ssn|social_security|state_id|voter_id)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Identification attributes must be encrypted and properly handled"

      # Contact Attributes
      - pattern: "\\b(?:email_address|fax|home_address|chat_id|mobile|phone|website|social_media)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Contact information must be properly protected"

      # Demographic Attributes
      - pattern: "\\b(?:age|date_of_birth|dob|disability|employment|ethnicity|race|family|gender|sex|marital|nationality|citizenship|religion|sexual_orientation|socioeconomic)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Demographic information requires special handling"

      # Financial Attributes
      - pattern: "\\b(?:account_balance|bank_account|credit_card|credit_score|debit_card|eft|wire_transfer|income|insurance|investment|loan|mortgage|pin|retirement|pension|transaction)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Financial information must be encrypted and secured"

      # Health Attributes
      - pattern: "\\b(?:allergy|biometric|diet|exercise|disability|genetic|health_insurance|immunization|medical|mental_health|prescription)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Health information requires HIPAA-compliant handling"

      # Education/Employment Attributes
      - pattern: "\\b(?:background_check|disciplinary|education|employment|job_application|nda|performance|certification|salary|compensation|training|union|accommodation)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Education and employment information must be properly protected"

      # Online/Digital Attributes
      - pattern: "\\b(?:browser_cookie|browsing_history|device_id|ip_address|location|app_usage|gaming_profile|purchase_history|search_history|social_media)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Digital footprint data requires privacy protection"

      # Check for logging of sensitive data
      - pattern: "\\b(?:log|print|console\\.log|debug).*?\\b(?:ssn|credit_card|passport|health|medical|financial)\\b"
        message: "Sensitive data must be masked before logging"

      # Check for proper encryption
      - pattern: "\\b(?:encrypt|hash|salt).*?\\b(?:password|secret|key|token|pii|sensitive)\\b"
        message: "Ensure proper encryption methods are used for sensitive data"

  - type: suggest
    message: |
      When handling PII and sensitive data:

      1. Data Classification and Inventory:
         - Identify and classify all PII data elements
         - Maintain data inventory with sensitivity levels
         - Document data flows and processing activities
         - Regular classification reviews
         - Data mapping and relationships
         - Third-party data sharing
         - Data retention schedules

      2. Privacy Controls and Protection:
         - Implement data minimization
         - Purpose limitation
         - Storage limitation
         - Data accuracy measures
         - Privacy by design principles
         - Privacy impact assessments
         - Regular privacy reviews
         - Data anonymization/pseudonymization
         - Encryption requirements

      3. Data Subject Rights Management:
         - Right to access (Subject Access Requests)
         - Right to rectification
         - Right to erasure (Right to be Forgotten)
         - Right to data portability
         - Processing restrictions
         - Consent management
         - Rights documentation
         - Response procedures
         - Verification processes

      4. Technical Security Controls:
         - Data encryption at rest
         - Encryption in transit
         - Access controls and authentication
         - Data masking and tokenization
         - Secure transmission protocols
         - Secure storage solutions
         - Audit logging and monitoring
         - Data retention enforcement
         - Secure disposal procedures

      5. Breach Prevention and Response:
         - Breach detection mechanisms
         - Notification procedures
         - Impact assessment process
         - Remediation protocols
         - Documentation requirements
         - Regulatory reporting
         - Stakeholder communication
         - Root cause analysis
         - Preventive measures

      6. Compliance and Documentation:
         - Regulatory compliance (GDPR, CCPA, HIPAA)
         - Industry standards
         - Privacy policies
         - Processing procedures
         - Training requirements
         - Audit trails
         - Compliance monitoring
         - Regular assessments
         - Policy updates

examples:
  - input: |
      # Bad: Improper PII handling
      class PersonalData:
          def __init__(self, ssn, credit_card, health_info):
              self.ssn = ssn  # Unencrypted storage
              self.credit_card = credit_card
              self.health_info = health_info
              print(f"Created record with SSN: {ssn}")  # Logging PII
              
      def process_user_data(user_data):
          # Unsafe handling of multiple PII elements
          log.info(f"Processing data for {user_data.full_name}")
          log.debug(f"Credit card: {user_data.credit_card}")
          db.store_raw(user_data.health_records)

      # Good: Proper PII handling with comprehensive protection
      from cryptography.fernet import Fernet
      from typing import Dict, Any
      import logging
      from datetime import datetime

      class PersonalData:
          def __init__(self):
              self._encryption_key = Fernet.generate_key()
              self._cipher_suite = Fernet(self._encryption_key)
              self._data_retention = datetime.now()
              self._audit_log = []
              
          def store_pii(self, data_type: str, value: str) -> None:
              """Securely store PII data with encryption and logging."""
              try:
                  # Encrypt sensitive data
                  encrypted_value = self._cipher_suite.encrypt(value.encode())
                  self._data[data_type] = {
                      'value': encrypted_value,
                      'created_at': datetime.now(),
                      'access_count': 0
                  }
                  
                  # Audit logging with masked data
                  self._log_access(f"Stored {data_type} data", data_type)
              except Exception as e:
                  logging.error(f"Error storing {data_type} data: {str(e)}")
                  raise
          
          def get_pii(self, data_type: str, purpose: str) -> str:
              """Retrieve PII data with access logging and purpose tracking."""
              if not self._validate_access(data_type, purpose):
                  raise PermissionError(f"Unauthorized access to {data_type}")
                  
              try:
                  data = self._data[data_type]
                  decrypted_value = self._cipher_suite.decrypt(data['value']).decode()
                  data['access_count'] += 1
                  
                  # Audit logging
                  self._log_access(f"Retrieved {data_type} data for {purpose}", data_type)
                  return decrypted_value
              except Exception as e:
                  logging.error(f"Error retrieving {data_type} data: {str(e)}")
                  raise
          
          def _log_access(self, message: str, data_type: str) -> None:
              """Log access with masked data."""
              self._audit_log.append({
                  'timestamp': datetime.now(),
                  'action': message,
                  'data_type': data_type
              })
              
          def _validate_access(self, data_type: str, purpose: str) -> bool:
              """Validate access based on purpose and permissions."""
              # Implement access control logic
              return True  # Placeholder for actual validation

metadata:
  priority: critical
  version: 2.0
  tags:
    - privacy
    - pii
    - security
    - compliance
    - data-protection
    - gdpr
    - ccpa
    - hipaa
  changelog:
    - 2.0: Updated with comprehensive PII catalog and enhanced privacy controls
    - 1.0: Initial version 