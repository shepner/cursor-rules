---
description: 
globs: 
alwaysApply: true
---
---
description: "Rules for managing secure configuration and settings across applications."
globs: ["**/*.{json,yaml,yml,toml,ini,conf,env}", "**/*{config,settings,environment}*"]
alwaysApply: false
---

# Secure Configuration Standards

Rules for managing secure configuration and settings across applications.

<rule>
name: code-secure-configuration
description: Standards for implementing secure configuration management
filters:
  - type: file_extension
    pattern: "\\.(json|yaml|yml|toml|ini|conf|env)$"
  - type: file_name
    pattern: "(config|settings|environment)"
  - type: content
    pattern: "(configuration|settings|environment|secrets)"

actions:
  - type: validate
    conditions:
      # Check for hardcoded configuration
      - pattern: "\\b(?:api_key|secret|password|token)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Do not hardcode sensitive configuration values"
      # Check for insecure defaults
      - pattern: "\\b(?:debug|development|test)\\s*[=:]\\s*true"
        message: "Ensure secure default configurations"
      # Check for environment configuration
      - pattern: "\\b(?:prod|production|staging|development)\\s*[=:]"
        message: "Ensure proper environment-specific configuration"

  - type: suggest
    message: |
      When implementing secure configuration:

      1. Configuration Management:
         - Use environment variables
         - Implement secrets management
         - Separate configurations by environment
         - Version control safe defaults
         - Document configuration options
         - Regular configuration reviews
         - Change management process

      2. Security Settings:
         - Secure default values
         - Disable debug features
         - Enable security features
         - Configure logging levels
         - Set access controls
         - Enable encryption
         - Configure timeouts

      3. Environment Management:
         - Production safeguards
         - Development controls
         - Staging environment
         - Test configurations
         - Local development
         - CI/CD settings
         - Deployment controls

      4. Secrets Management:
         - Secure storage
         - Access control
         - Key rotation
         - Audit logging
         - Backup procedures
         - Recovery process
         - Version control

      5. Compliance Settings:
         - Regulatory requirements
         - Industry standards
         - Security baselines
         - Audit controls
         - Monitoring settings
         - Reporting configuration
         - Policy enforcement

examples:
  - input: |
      # Bad: Insecure configuration
      {
        "api_key": "1234567890abcdef",
        "debug_mode": true,
        "allow_all_origins": true,
        "disable_security": true
      }

      # Good: Secure configuration
      {
        "api_key": "${API_KEY}",  # Use environment variable
        "debug_mode": false,
        "cors": {
          "allowed_origins": ["https://trusted-domain.com"],
          "allowed_methods": ["GET", "POST"],
          "max_age": 3600
        },
        "security": {
          "enable_rate_limiting": true,
          "max_requests_per_minute": 100,
          "require_authentication": true,
          "session_timeout": 3600,
          "secure_cookies": true,
          "content_security_policy": "default-src 'self'"
        }
      }

metadata:
  priority: critical
  version: 1.0
  tags:
    - security
    - configuration
    - compliance
    - secrets
  changelog:
    - 1.0: Initial version with comprehensive configuration controls 