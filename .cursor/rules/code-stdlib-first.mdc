---
description: 
globs: 
alwaysApply: true
---
---
description: Standard Library First
globs: ["**/*.{py,rs,go,js,ts,java,kt,swift,cpp,c}"]
alwaysApply: false
---

# Standard Library First

Guidelines for maximizing standard library usage and minimizing unnecessary dependencies.

<rule>
name: stdlib-first
description: Prefer standard library solutions over third-party dependencies
filters:
  - type: file_extension
    pattern: "\\.(py|rs|go|js|ts|java|kt|swift|cpp|c)$"
  - type: content
    pattern: "(import|require|use|include)"

actions:
  - type: suggest
    conditions:
      # Python
      - pattern: "import requests"
        message: "Consider using urllib.request for HTTP operations"
      - pattern: "from PIL import Image"
        message: "Consider using built-in imghdr for basic image operations"
      # JavaScript
      - pattern: "import lodash"
        message: "Many lodash functions are available in native JavaScript"
      - pattern: "import moment"
        message: "Consider using built-in Date object or Temporal API"
      # Go
      - pattern: "github.com/stretchr/testify"
        message: "Consider using testing package for basic testing needs"
      # Rust
      - pattern: "use chrono"
        message: "Consider using std::time for basic time operations"
      # General
      - pattern: "import.*json"
        not_pattern: "(std|builtin)"
        message: "Use standard library JSON parsing when possible"

  - type: reject
    conditions:
      # Reject known anti-patterns
      - pattern: "import left-pad"
        message: "Use standard string padding methods"
      - pattern: "import is-array"
        message: "Use Array.isArray() or instanceof Array"
      - pattern: "import is-number"
        message: "Use typeof or Number.isFinite()"

  - type: suggest
    message: |
      Before adding a new dependency, consider these alternatives:
      1. Standard library solutions
      2. Writing simple functions yourself
      3. Using language built-ins
      4. Platform-specific APIs
      
      Common standard library alternatives:
      - HTTP requests: urllib.request (Python), fetch (JS), net/http (Go)
      - JSON handling: json (Python), JSON (JS), encoding/json (Go)
      - File operations: os, io (most languages)
      - Time/Date: time (Python), Date (JS), time (Go)
      - Testing: unittest (Python), test (JS), testing (Go)
      - Logging: logging (Python), console (JS), log (Go)
      
      Benefits of standard library:
      - No external dependencies
      - Guaranteed compatibility
      - Built-in security updates
      - Consistent behavior
      - Better performance
      - Smaller bundle size

examples:
  - input: |
      # Python with unnecessary dependencies
      import requests
      import json
      from datetime import datetime
      
      def fetch_data():
          response = requests.get('https://api.example.com/data')
          return response.json()
    output: |
      # Python using standard library
      from urllib.request import urlopen
      import json
      from datetime import datetime
      
      def fetch_data():
          with urlopen('https://api.example.com/data') as response:
              return json.loads(response.read())

  - input: |
      // JavaScript with unnecessary dependencies
      import moment from 'moment';
      import isArray from 'is-array';
      import leftPad from 'left-pad';
      
      const date = moment().format('YYYY-MM-DD');
      const arr = isArray([1, 2, 3]);
      const padded = leftPad('hello', 10);
    output: |
      // JavaScript using standard library
      const date = new Date().toISOString().split('T')[0];
      const arr = Array.isArray([1, 2, 3]);
      const padded = 'hello'.padStart(10);

metadata:
  priority: high
  version: 1.0
  tags:
    - dependencies
    - optimization
    - best-practices
    - standard-library
</rule> 