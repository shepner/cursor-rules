---
description: Validates examples in Cursor rules
globs: ["rules/*.mdc"]
alwaysApply: true
---
---
description: Rule Examples Validation
globs: ["**/*.mdc"]
alwaysApply: false
---

# Examples Validation

This rule ensures that all Cursor rules have sufficient examples and are not too large.

## Description

Validates that each Cursor rule has at least 2 examples and is not larger than 100KB.

## Config

```yaml
validation:
  min_examples: 2
  max_file_size_kb: 100
```

## Filters

```python
def check(file_path: str) -> bool:
    """Check if file is a Cursor rule."""
    return file_path.endswith('.mdc') and file_path.startswith('rules/')
```

## Actions

```python
def validate_examples(file_path: str) -> tuple[bool, list[str]]:
    """Validate examples and file size in a rule file."""
    issues = []
    
    try:
        # Check file size
        file_size_kb = os.path.getsize(file_path) / 1024
        if file_size_kb > 100:
            issues.append(f"File too large: {file_size_kb:.1f}KB (max 100KB)")
            
        # Check examples
        with open(file_path, 'r') as f:
            content = f.read()
            
        # Skip YAML frontmatter
        parts = content.split('---')
        if len(parts) >= 3:
            content = parts[2]
            
        # Count examples
        example_count = content.count('Example 1:') + content.count('Example 2:')
        if example_count < 2:
            issues.append(f"Insufficient examples: {example_count} (min 2)")
            
        return len(issues) == 0, issues
        
    except Exception as e:
        return False, [f"Error validating examples: {str(e)}"]

def apply_fix(file_path: str, issue: str) -> bool:
    """Apply a fix for example validation issues."""
    try:
        if "Insufficient examples" in issue:
            with open(file_path, 'r') as f:
                content = f.read()
                
            # Skip YAML frontmatter
            parts = content.split('---')
            if len(parts) >= 3:
                content = parts[2]
                
            # Add missing examples
            if 'Example 1:' not in content:
                new_example = "\nExample 1:\n```python\n# Example code here\n```\n"
                content += new_example
                
            if 'Example 2:' not in content:
                new_example = "\nExample 2:\n```python\n# Another example here\n```\n"
                content += new_example
                
            # Write the updated content
            new_content = parts[0] + "---" + parts[1] + "---" + content
            with open(file_path, 'w') as f:
                f.write(new_content)
            return True
            
        elif "File too large" in issue:
            # For file size issues, we can't automatically fix
            print("File size too large. Please manually reduce the file size.")
            return False
            
    except Exception as e:
        print(f"Error applying fix: {str(e)}")
        
    return False
```

## Examples

Example 1: Valid examples
```markdown
# Rule Title

## Examples

Example 1:
```python
# First example code
def example1():
    pass
```

Example 2:
```python
# Second example code
def example2():
    pass
```
```

Example 2: Invalid examples (insufficient)
```markdown
# Rule Title

## Examples

Example 1:
```python
# Only one example
def example():
    pass
```
```

## Metrics

```python
def collect_metrics(file_path: str) -> dict:
    """Collect metrics about examples validation."""
    try:
        file_size_kb = os.path.getsize(file_path) / 1024
        
        with open(file_path, 'r') as f:
            content = f.read()
            
        # Skip YAML frontmatter
        parts = content.split('---')
        if len(parts) >= 3:
            content = parts[2]
            
        example_count = content.count('Example 1:') + content.count('Example 2:')
        
        return {
            "file_size_kb": file_size_kb,
            "example_count": example_count,
            "has_sufficient_examples": example_count >= 2,
            "is_within_size_limit": file_size_kb <= 100
        }
        
    except Exception as e:
        return {
            "error": str(e)
        }
```

## Metadata

```yaml
category: validation
severity: error
tags:
  - examples
  - size
  - validation
``` 