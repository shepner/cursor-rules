---
description: 
globs: 
alwaysApply: false
---
---
description: Standards for implementing comprehensive data validation across the project
globs: ["**/*.{py,sql,js,ts,java,cpp,cs,go,rs,rb,php}"]
alwaysApply: false
---

# Data Validation Standards

Standards for implementing comprehensive data validation across the project.

<rule>
name: code-data-validation
description: Standards for implementing comprehensive data validation mechanisms
filters:
  - type: file_extension
    pattern: "\\.(py|sql|js|ts|java|cpp|cs|go|rs|rb|php)$"
  - type: content
    pattern: "(validate|check|verify|assert|ensure|confirm|test|validate_schema|validate_data)"

actions:
  - type: validate
    conditions:
      # Input Validation
      - pattern: "\\b(?:input|data|value).*?\\b(?:without|no).*?\\b(?:validation|check|verify)\\b"
        message: "Implement proper input validation"
      
      # Type Validation
      - pattern: "\\b(?:type|format).*?\\b(?:without|no).*?\\b(?:check|validation)\\b"
        message: "Validate data types and formats"
      
      # Range Validation
      - pattern: "\\b(?:range|limit|bound).*?\\b(?:without|no).*?\\b(?:check|validation)\\b"
        message: "Validate value ranges and limits"
      
      # Schema Validation
      - pattern: "\\b(?:schema|structure).*?\\b(?:without|no).*?\\b(?:validation|check)\\b"
        message: "Validate data schema and structure"
      
      # Quality Validation
      - pattern: "\\b(?:quality|integrity).*?\\b(?:without|no).*?\\b(?:check|validation)\\b"
        message: "Implement data quality checks"

  - type: suggest
    message: |
      Implement validation following these capability areas:

      1. Input Validation:
         - Data type validation
         - Format validation
         - Required field checks
         - Value range validation
         - Data consistency checks
         - Field relationship validation

      2. BigQuery Data Validation:
         - Schema compatibility checks
         - Data quality validation
         - Foreign key relationship validation
         - Data distribution monitoring
         - Duplicate detection
         - Data integrity checks

      3. Data Quality Metrics:
         - Completeness validation
         - Accuracy checks
         - Consistency validation
         - Timeliness verification
         - Uniqueness validation
         - Data quality scoring

examples:
  - input: |
      # Bad: Missing validation
      def process_data(data):
          return data['value']  # No validation
      
      # Good: Comprehensive validation
      def validate_torn_data(data: dict) -> tuple[bool, list[str]]:
          """Validate Torn City API data.
          
          Args:
              data: Dictionary containing API response
              
          Returns:
              Tuple of (is_valid, error_messages)
          """
          errors = []
          
          # Required fields
          required_fields = ['id', 'name', 'level']
          for field in required_fields:
              if field not in data:
                  errors.append(f"Missing required field: {field}")
          
          # Type validation
          if 'level' in data and not isinstance(data['level'], int):
              errors.append("Level must be an integer")
          
          # Range validation
          if 'level' in data and isinstance(data['level'], int):
              if data['level'] < 1:
                  errors.append("Level must be positive")
          
          return len(errors) == 0, errors

  - input: |
      -- Bad: Missing validation
      INSERT INTO users (name, level) VALUES ('user1', -1);
      
      -- Good: With validation
      WITH data_quality AS (
          SELECT
              COUNT(*) as total_records,
              COUNT(CASE WHEN level < 1 THEN 1 END) as invalid_levels,
              COUNT(CASE WHEN name IS NULL THEN 1 END) as missing_names
          FROM `torncity-402423.torn_data.v2_faction_members`
      )
      SELECT
          total_records,
          invalid_levels,
          missing_names,
          CASE 
              WHEN invalid_levels > 0 OR missing_names > 0 THEN 'FAIL'
              ELSE 'PASS'
          END as validation_status
      FROM data_quality;

metadata:
  priority: high
  version: 1.1
  tags:
    - validation
    - data-quality
    - input-validation
    - schema-validation
    - bigquery
  changelog:
    - version: 1.1
      date: 2024-03-19
      description: Added Torn City specific validation examples
    - version: 1.0
      date: 2024-03-19
      description: Initial version with comprehensive validation standards 