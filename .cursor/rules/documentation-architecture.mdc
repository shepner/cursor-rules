---
description: 
globs: ARCHITECTURE*.md
alwaysApply: false
---
---
description: "Definition for how Architectural documentation should be formatted"
globs: ["ARCHITECTURE*.md"]
# alwaysApply: true
---

# Architectural documentation

## Table of Contents
1. [Overview](mdc:#1-overview)
2. [System Flow](mdc:#2-system-flow)
3. [Components](mdc:#3-components)
   3.1. [Documentation Generator](mdc:#31-documentation-generator)
   3.2. [Documentation Validator](mdc:#32-documentation-validator)
   3.3. [Documentation Formatter](mdc:#33-documentation-formatter)
4. [Documentation Types](mdc:#4-documentation-types)
   4.1. [Code Documentation](mdc:#41-code-documentation)
   4.2. [API Documentation](mdc:#42-api-documentation)
   4.3. [Architecture Documentation](mdc:#43-architecture-documentation)
5. [Configuration](mdc:#5-configuration)
6. [Usage Examples](mdc:#6-usage-examples)

<rule>
name: code-documentation-architecture
description: Standards for architectural documentation and system design documentation
filters:
  # Match architecture documentation files
  - type: glob
    pattern: "ARCHITECTURE*.md"

actions:
  - type: validate
    conditions:
      # Reject missing system overview
      - pattern: "^(?!(\\s*#.*System Overview|\\s*#.*Architecture Overview))"
        message: "Add system overview section explaining the high-level architecture"
      # Reject missing component documentation
      - pattern: "^(?!(\\s*#.*Components|\\s*#.*System Components))"
        message: "Document all major system components and their interactions"
      # Reject missing data flow documentation
      - pattern: "^(?!(\\s*#.*Data Flow|\\s*#.*Data Architecture))"
        message: "Document data flow and data architecture patterns"

  - type: suggest
    message: |
      When documenting architecture:

      1. System Overview:
         - High-level architecture description
         - System boundaries and context
         - Key architectural decisions
         - Technology stack overview
         - System requirements
         - Performance requirements
         - Security requirements

      2. Component Documentation:
         - Component descriptions
         - Component interactions
         - Interface definitions
         - Dependencies
         - Configuration
         - State management
         - Error handling

      3. Data Architecture:
         - Data models
         - Data flow diagrams
         - Data storage patterns
         - Data access patterns
         - Data security
         - Data lifecycle
         - Data migration

      4. Deployment Architecture:
         - Infrastructure requirements
         - Deployment patterns
         - Scaling strategy
         - Monitoring strategy
         - Backup strategy
         - Disaster recovery
         - Security measures

      5. Development Guidelines:
         - Coding standards
         - Testing strategy
         - CI/CD pipeline
         - Version control
         - Documentation standards
         - Review process
         - Release process

examples:
  - input: |
      # Bad: Incomplete architecture documentation
      The system uses a microservices architecture.
      Components communicate via REST APIs.
      Data is stored in PostgreSQL.

      # Good: Comprehensive architecture documentation
      # System Overview
      The system implements a microservices architecture with the following key characteristics:
      - Event-driven communication between services
      - Containerized deployment using Docker
      - Kubernetes orchestration
      - PostgreSQL for persistent storage
      - Redis for caching
      
      ## Components
      1. API Gateway
         - Handles client requests
         - Implements rate limiting
         - Manages authentication
         - Routes to appropriate services
      
      2. User Service
         - Manages user data
         - Handles authentication
         - Implements RBAC
         - Exposes REST API
      
      ## Data Flow
      1. Request Flow
         Client -> API Gateway -> Service -> Database
      2. Event Flow
         Service -> Message Queue -> Consumer Services
      
      ## Deployment
      - Kubernetes clusters in multiple regions
      - Auto-scaling based on load
      - Blue-green deployment strategy
      - Automated rollback capability

metadata:
  priority: high
  version: 1.0
  tags:
    - architecture
    - documentation
    - system-design
  changelog:
    - 1.0: Initial version with comprehensive architectural documentation guidelines
