---
description: Standards for maintaining consistent code style across the project
globs: ["*.py", "*.sql", "*.sh"]
alwaysApply: true
---
---
description: Code Style Guidelines
globs: ["**/*.{py,sql,sh}"]
alwaysApply: false
---

# Code Style Guidelines

## Overview
Standards for maintaining consistent code style across the project.

## Configuration
globs: ["*.py", "*.sql", "*.sh"]
priority: high

## Rules

### Python Style Guidelines
1. Follow PEP 8 conventions
2. Use meaningful variable and function names
3. Keep functions focused and small
4. Use type hints for function parameters and returns
5. Document functions with docstrings

### SQL Style Guidelines
1. Use uppercase for SQL keywords
2. Align columns in SELECT statements
3. Use meaningful table aliases
4. Include appropriate indexes
5. Comment complex queries

### Shell Script Guidelines
1. Use shellcheck for validation
2. Include error handling
3. Use meaningful variable names
4. Document script purpose and usage

## Examples

### Good Python Style
```python
def process_data(input_data: list[dict]) -> dict:
    """Process input data and return summary statistics.
    
    Args:
        input_data: List of dictionaries containing data points
        
    Returns:
        Dictionary containing summary statistics
    """
    return {"count": len(input_data)}
```

### Good SQL Style
```sql
SELECT 
    u.user_id,
    u.username,
    COUNT(o.order_id) as order_count
FROM users u
LEFT JOIN orders o ON u.user_id = o.user_id
GROUP BY 
    u.user_id,
    u.username;
```

## Version History
- 1.0: Initial version
- 1.1: Added SQL and shell script guidelines 

<rule>
name: code-style
description: Standards for code formatting and style
filters:
  # Match source code files
  - type: file_extension
    pattern: "\\.(py|sql|sh)$"
  # Match style patterns
  - type: content
    pattern: "(import|from|SELECT|FROM|WHERE|#!/bin/)"

actions:
  - type: reject
    conditions:
      # Reject long lines
      - pattern: "^.{89,}"
        message: "Line exceeds maximum length"
      # Reject incorrect indentation
      - pattern: "^[^\\s]|^\\s{1,3}|^\\s{5,}"
        message: "Use 4 spaces for indentation"
      # Reject missing docstrings
      - pattern: "^def\\s+\\w+.*?(?!\\s*[\"'])"
        message: "Add docstring to function"
      # Reject incorrect SQL formatting
      - pattern: "SELECT\\s+\\*\\s+FROM"
        message: "List columns explicitly in SELECT"
      # Reject incorrect shell formatting
      - pattern: "\\$\\{[^}]+\\}"
        message: "Use proper variable expansion"

  - type: suggest
    message: |
      When formatting code:

      1. Python Style:
         - Follow PEP 8
         - Use Google style docstrings
         - Order imports correctly
         - Use type hints
         - Keep functions focused

      2. SQL Style:
         - Use uppercase keywords
         - Align clauses
         - List columns explicitly
         - Use meaningful aliases
         - Format complex queries

      3. Shell Style:
         - Use shellcheck
         - Quote variables
         - Handle errors
         - Use functions
         - Document scripts

      4. General:
         - Keep lines under limit
         - Use consistent indentation
         - Add whitespace
         - Use meaningful names
         - Comment complex logic

examples:
  - input: |
      # Bad: Poor Python style
      def process_data(data):
          result=[]
          for i in data:
              if i>0:
                  result.append(i*2)
          return result

      # Good: Proper Python style
      from typing import List, Optional
      
      def process_data(data: List[float]) -> List[float]:
          """Process input data and return doubled positive values.
          
          Args:
              data: List of numeric values to process
          
          Returns:
              List containing doubled positive values
          """
          result: List[float] = []
          for value in data:
              if value > 0:
                  result.append(value * 2)
          return result

  - input: |
      # Bad: Poor SQL style
      select * from users u join orders o on u.id=o.user_id where o.status='active';

      # Good: Proper SQL style
      SELECT 
          u.user_id,
          u.username,
          COUNT(o.order_id) AS order_count
      FROM users u
      LEFT JOIN orders o 
          ON u.user_id = o.user_id
      WHERE o.status = 'active'
      GROUP BY 
          u.user_id,
          u.username;

  - input: |
      # Bad: Poor shell style
      for i in $@; do
      if [ $i -gt 0 ];then
      echo $i
      fi
      done

      # Good: Proper shell style
      #!/bin/bash
      set -euo pipefail
      
      process_numbers() {
          local input_numbers=("$@")
          
          for number in "${input_numbers[@]}"; do
              if (( number > 0 )); then
                  echo "$number"
              fi
          done
      }

functions:
  validate_style: |
    def check():
      """
      Validate code style.
      Returns (is_valid, issues).
      """
      issues = []
      # Check line length
      if exceeds_line_length():
        issues.append("Line too long")
      # Check indentation
      if has_incorrect_indentation():
        issues.append("Incorrect indentation")
      # Check docstrings
      if missing_docstring():
        issues.append("Missing docstring")
      return len(issues) == 0, issues

metrics:
  - name: style_violations
    type: counter
    labels: ["language", "violation_type"]
  - name: auto_fixes
    type: counter
    labels: ["language", "fix_type"]
  - name: line_lengths
    type: histogram
    labels: ["language"]
  - name: docstring_coverage
    type: gauge
    labels: ["language"]
  - name: formatting_time
    type: histogram
    labels: ["language"]

metadata:
  priority: high
  version: 1.0
  tags:
    - style
    - formatting
    - python
    - sql
    - shell
  changelog:
    - 1.0: Initial version with comprehensive style standards 