# System and Application Hardening Standards

Rules for implementing comprehensive system and application hardening practices.

<rule>
name: code-hardening
description: Standards for implementing system and application hardening aligned with security capabilities
filters:
  - type: file_extension
    pattern: "\\.(py|js|ts|java|cpp|cs|go|rs|rb|php|yaml|yml|json|xml|conf|properties|sh|bash|dockerfile)$"
  - type: content
    pattern: "(config|setting|property|environment|deployment|platform|system|runtime|container|vm|cloud)"

actions:
  - type: validate
    conditions:
      # Configuration Hardening
      - pattern: "\\b(?:debug|development|test)\\s*[=:]\\s*true"
        message: "Ensure debug/development modes are disabled in production"
      
      - pattern: "\\b(?:allow_all|disable_security|skip_validation)\\s*[=:]\\s*true"
        message: "Security controls must not be disabled"
      
      # Platform Hardening
      - pattern: "\\b(?:chmod|permission|mode)\\s*[=:]\\s*['\"]?(?:777|666|755|775|0777|0666|0755|0775)['\"]?"
        message: "Use restrictive file permissions"
      
      - pattern: "\\b(?:root|admin|superuser)\\s*[=:]\\s*['\"][^'\"]+['\"]"
        message: "Avoid running services with elevated privileges"
      
      # Application Hardening
      - pattern: "\\b(?:cors|origin)\\s*[=:]\\s*['\"]\\*['\"]"
        message: "Implement restrictive CORS policies"
      
      - pattern: "\\b(?:timeout|max_retry|rate_limit)\\s*[=:]\\s*(?:0|-1|999999)"
        message: "Configure appropriate timeouts and limits"

  - type: suggest
    message: |
      Implement hardening following these capability areas:

      1. Configuration Hardening:
         - Secure Default Settings
         - Environment Controls
         - Feature Flags
         - Security Parameters
         - Runtime Configuration
         - Service Settings
         - Debug Controls

      2. Platform Hardening:
         - OS Hardening
         - Container Security
         - VM Security
         - Cloud Security
         - Network Security
         - Storage Security
         - Service Hardening

      3. Application Hardening:
         - Input Validation
         - Output Encoding
         - Error Handling
         - Session Management
         - Authentication
         - Authorization
         - Logging

      4. Infrastructure Hardening:
         - Network Controls
         - Firewall Rules
         - Load Balancing
         - Service Mesh
         - API Gateway
         - DNS Security
         - TLS Configuration

      5. Runtime Hardening:
         - Process Isolation
         - Memory Protection
         - Resource Limits
         - Dependency Controls
         - Library Security
         - Module Security
         - Plugin Security

      6. Deployment Hardening:
         - CI/CD Security
         - Image Security
         - Secret Management
         - Configuration Management
         - Version Control
         - Deployment Controls
         - Rollback Procedures

examples:
  - input: |
      # Bad: Insecure configuration
      app_config = {
          'debug': True,  # Debug enabled in production
          'allow_all_origins': '*',  # Unsafe CORS
          'timeout': 0,  # No timeout
          'file_mode': '0777'  # Unsafe permissions
      }
      
      # Good: Hardened configuration
      from typing import Dict, Any
      import os
      import logging

      class HardenedConfig:
          def __init__(self):
              self._env = os.getenv('APP_ENV', 'production')
              self._config: Dict[str, Any] = {}
              self._initialized = False
              
          def initialize(self) -> None:
              """Initialize hardened configuration with secure defaults."""
              try:
                  self._config = {
                      'debug': self._is_development(),
                      'allowed_origins': self._get_allowed_origins(),
                      'timeout': 30,  # 30 second timeout
                      'max_retries': 3,
                      'rate_limit': {
                          'window': 300,  # 5 minutes
                          'max_requests': 100
                      },
                      'file_permissions': 0o644,  # Restrictive file mode
                      'security': {
                          'hsts': True,
                          'frame_options': 'DENY',
                          'content_security_policy': self._get_csp()
                      }
                  }
                  self._initialized = True
                  
              except Exception as e:
                  logging.error(f"Configuration error: {str(e)}")
                  raise
                  
          def _is_development(self) -> bool:
              """Safely determine if in development environment."""
              return self._env.lower() in ['development', 'dev']
              
          def _get_allowed_origins(self) -> list:
              """Get allowed CORS origins from environment."""
              origins = os.getenv('ALLOWED_ORIGINS', '')
              return [origin.strip() for origin in origins.split(',') if origin.strip()]
              
          def _get_csp(self) -> str:
              """Get secure Content Security Policy."""
              return "default-src 'self'; script-src 'self'; object-src 'none';"

metadata:
  priority: critical
  version: 1.0
  tags:
    - security
    - hardening
    - configuration
    - platform
    - infrastructure
    - deployment
  changelog:
    - 1.0: Initial version with comprehensive hardening capabilities 