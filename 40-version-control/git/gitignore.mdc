---
description: Guidelines for managing .gitignore to prevent sensitive information and unnecessary files from being committed
globs: [".gitignore"]
alwaysApply: true
---
# Gitignore Management Guidelines

Rules for ensuring sensitive information and unnecessary files are properly excluded from version control.

<rule>
name: gitignore-management
description: Standards for managing .gitignore files to protect sensitive information and exclude unnecessary files
filters:
  # Match gitignore files
  - type: filename
    pattern: "\\.gitignore$"
  # Match sensitive file patterns
  - type: content
    pattern: "(password|secret|key|token|credential|\\.env|\\.config)"

actions:
  - type: reject
    conditions:
      # Reject missing environment file patterns
      - pattern: "^(?!.*\\.env)"
        message: "Include .env pattern to prevent committing environment files"
      # Reject missing credential file patterns
      - pattern: "^(?!.*credentials)"
        message: "Include patterns for credential files"
      # Reject missing key file patterns
      - pattern: "^(?!.*\\*key\\*)"
        message: "Include patterns for key files"
      # Reject missing IDE/editor files
      - pattern: "^(?!.*(\\.idea|\\.vscode))"
        message: "Include patterns for IDE and editor files"
      # Reject missing OS files
      - pattern: "^(?!.*(Thumbs\\.db|\\.DS_Store))"
        message: "Include patterns for OS-specific files"

  - type: suggest
    message: |
      When managing .gitignore:

      1. Sensitive Information:
         - Environment files (.env*)
         - API keys and tokens
         - Credential files
         - Private key files
         - Configuration with secrets
         - Password files
         - Certificate files

      2. Build and Dependencies:
         - Node modules (node_modules/)
         - Python virtual environments (venv/, env/)
         - Compiled files (*.pyc, *.class, *.o)
         - Build directories (dist/, build/)
         - Package lock files
         - Dependency caches

      3. IDE and Editor Files:
         - .idea/ (IntelliJ)
         - .vscode/ (VS Code)
         - *.swp (Vim)
         - .project (Eclipse)
         - *.sublime-* (Sublime)
         - .settings/

      4. OS Generated Files:
         - .DS_Store (macOS)
         - Thumbs.db (Windows)
         - Desktop.ini
         - $RECYCLE.BIN/
         - *.lnk

      5. Temporary Files:
         - Log files (*.log)
         - Cache directories
         - Temporary builds
         - Debug files
         - Backup files (*~)
         - Crash reports

      6. Project Specific:
         - Local configuration
         - Test data files
         - Development databases
         - Mock data
         - Personal notes
         - Local scripts

examples:
  - input: |
      # Bad: Missing critical patterns
      node_modules/
      .DS_Store

      # Good: Comprehensive .gitignore
      # Environment and Secrets
      .env
      .env.*
      *.key
      *secret*
      *password*
      credentials/
      *credential*
      *token*
      *.pem
      *.cert
      *.pfx
      config/*credentials*
      *apikey*
      .aws/
      .ssh/
      
      # Dependencies and Build
      node_modules/
      venv/
      env/
      __pycache__/
      *.pyc
      *.pyo
      *.pyd
      .Python
      build/
      dist/
      *.egg-info/
      .eggs/
      pip-log.txt
      
      # IDE and Editor
      .idea/
      .vscode/
      *.swp
      *.swo
      *~
      .project
      .classpath
      .settings/
      *.sublime-*
      .atom/
      .buildpath
      
      # OS Generated
      .DS_Store
      .DS_Store?
      ._*
      .Spotlight-V100
      .Trashes
      ehthumbs.db
      Thumbs.db
      Desktop.ini
      $RECYCLE.BIN/
      
      # Logs and Databases
      *.log
      *.sqlite
      *.sqlite3
      *.db
      debug.log
      npm-debug.log*
      yarn-debug.log*
      yarn-error.log*
      
      # Temporary Files
      tmp/
      temp/
      .temp/
      .tmp/
      .cache/
      coverage/
      .coverage
      htmlcov/
      .pytest_cache/
      .tox/
      
      # Project Specific
      local_settings.py
      instance/
      .webassets-cache
      .env.local
      .env.development
      .env.test
      .env.production
      docker-compose.override.yml
      
      # Version Control
      .git/
      .gitattributes
      .gitmodules
      
      # Package Managers
      package-lock.json
      yarn.lock
      composer.lock
      Pipfile.lock
      poetry.lock
      
      # Documentation and Notes
      docs/_build/
      _site/
      .jekyll-cache/
      .jekyll-metadata
      TODO.md
      NOTES.md
      *.private

metadata:
  priority: high
  version: 1.0
  tags:
    - security
    - git
    - secrets
    - configuration
  changelog:
    - 1.0: Initial version with comprehensive gitignore patterns
</rule> 